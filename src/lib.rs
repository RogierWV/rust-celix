#![allow(dead_code, bad_style)]

/// Constants extracted from Celix headers
pub mod consts {
    pub const DEPLOYMENTADMIN_RESOURCE_PROCESSOR_SERVICE: &'static str = "resource_processor";
    pub const OSGI_RSA_REMOTE_ENDPOINT: &'static str = "remote_endpoint";
    pub const OSGI_RSA_REMOTE_PROXY_FACTORY: &'static str = "remote_proxy_factory";
    pub const OSGI_RSA_REMOTE_PROXY_TIMEOUT: &'static str = "remote_proxy_timeout";
    pub const OSGI_RSA_REMOTE_SERVICE_ADMIN: &'static str = "remote_service_admin";
    pub const OSGI_SHELL_COMMAND_NAME: &'static str = "command.name";
    pub const OSGI_SHELL_COMMAND_USAGE: &'static str = "command.usage";
    pub const OSGI_SHELL_COMMAND_DESCRIPTION: &'static str = "command.description";
    pub const DM_COMPONENT_MAX_ID_LENGTH: i32 = 64;
    pub const DM_COMPONENT_MAX_NAME_LENGTH: i32 = 128;
    pub const DM_INFO_SERVICE_NAME: &'static str = "dm_info";
    pub const CELIX_SUCCESS: i32 = 0;
    pub const CELIX_START_ERROR: i32 = 70000;
    pub const CELIX_ERRSPACE_SIZE: i32 = 1000;
    pub const CELIX_START_USERERR: i32 = (CELIX_START_ERROR + CELIX_ERRSPACE_SIZE);
    pub const CELIX_BUNDLE_EXCEPTION: i32 = (CELIX_START_ERROR + 1);
    pub const CELIX_INVALID_BUNDLE_CONTEXT: i32 = (CELIX_START_ERROR + 2);
    pub const CELIX_ILLEGAL_ARGUMENT: i32 = (CELIX_START_ERROR + 3);
    pub const CELIX_INVALID_SYNTAX: i32 = (CELIX_START_ERROR + 4);
    pub const CELIX_FRAMEWORK_SHUTDOWN: i32 = (CELIX_START_ERROR + 5);
    pub const CELIX_ILLEGAL_STATE: i32 = (CELIX_START_ERROR + 6);
    pub const CELIX_FRAMEWORK_EXCEPTION: i32 = (CELIX_START_ERROR + 7);
    pub const CELIX_FILE_IO_EXCEPTION: i32 = (CELIX_START_ERROR + 8);
    pub const CELIX_SERVICE_EXCEPTION: i32 = (CELIX_START_ERROR + 9);
    pub const CELIX_ENOMEM: i32 = ENOMEM;
    pub const OSGI_FRAMEWORK_LISTENER_HOOK_SERVICE_NAME: &'static str = "listener_hook_service";
    pub const LOG_LVL_ERROR: i32 = 1;
    pub const LOG_LVL_WARNING: i32 = 2;
    pub const LOG_LVL_INFO: i32 = 3;
    pub const LOG_LVL_DEBUG: i32 = 4;
    pub const DYN_TYPE_INVALID: i32 = 0;
    pub const DYN_TYPE_SIMPLE: i32 = 1;
    pub const DYN_TYPE_COMPLEX: i32 = 2;
    pub const DYN_TYPE_SEQUENCE: i32 = 3;
    pub const DYN_TYPE_TYPED_POINTER: i32 = 4;
    pub const DYN_TYPE_TEXT: i32 = 5;
    pub const DYN_TYPE_REF: i32 = 6;
    pub const ENOMEM: i32 = 12;
}
pub use consts::*;
pub const celix_thread_default : celix_thread_t = celix_thread_t {
    threadInitialized: 0,
    thread: 0,
};

pub mod gen {
    /* automatically generated by rust-bindgen */

    pub type ptrdiff_t = ::std::os::raw::c_long;
    pub type size_t = ::std::os::raw::c_ulong;
    pub type wchar_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed1 {
        pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
        pub __clang_max_align_nonce2: ::std::os::raw::c_double,
    }
    impl ::std::clone::Clone for Struct_Unnamed1 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed1 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type max_align_t = Struct_Unnamed1;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_celix_status {
        pub code: ::std::os::raw::c_int,
        pub error: *mut ::std::os::raw::c_char,
    }
    impl ::std::clone::Clone for Struct_celix_status {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_celix_status {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type celix_status_t = ::std::os::raw::c_int;
    pub enum Struct_resource_processor { }
    pub type resource_processor_pt = *mut Struct_resource_processor;
    pub type resource_processor_service_pt =
        *mut Struct_resource_processor_service;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_resource_processor_service {
        pub processor: resource_processor_pt,
        pub begin: ::std::option::Option<unsafe extern "C" fn(processor:
                                                                  resource_processor_pt,
                                                              packageName:
                                                                  *mut ::std::os::raw::c_char)
                                             -> celix_status_t>,
        pub process: ::std::option::Option<unsafe extern "C" fn(processor:
                                                                    resource_processor_pt,
                                                                name:
                                                                    *mut ::std::os::raw::c_char,
                                                                path:
                                                                    *mut ::std::os::raw::c_char)
                                               -> celix_status_t>,
        pub dropped: ::std::option::Option<unsafe extern "C" fn(processor:
                                                                    resource_processor_pt,
                                                                name:
                                                                    *mut ::std::os::raw::c_char)
                                               -> celix_status_t>,
        pub dropAllResources: ::std::option::Option<extern "C" fn(processor:
                                                                      resource_processor_pt)
                                                        -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_resource_processor_service {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_resource_processor_service {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type remote_endpoint_pt = *mut Struct_remote_endpoint;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_remote_endpoint_service {
        pub endpoint: remote_endpoint_pt,
        pub setService: ::std::option::Option<unsafe extern "C" fn(endpoint:
                                                                       remote_endpoint_pt,
                                                                   service:
                                                                       *mut ::std::os::raw::c_void)
                                                  -> celix_status_t>,
        pub handleRequest: ::std::option::Option<unsafe extern "C" fn(endpoint:
                                                                          remote_endpoint_pt,
                                                                      data:
                                                                          *mut ::std::os::raw::c_char,
                                                                      reply:
                                                                          *mut *mut ::std::os::raw::c_char)
                                                     -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_remote_endpoint_service {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_remote_endpoint_service {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type remote_endpoint_service_pt = *mut Struct_remote_endpoint_service;
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_char;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed2 {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    impl ::std::clone::Clone for Struct_Unnamed2 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed2 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __fsid_t = Struct_Unnamed2;
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = __off64_t;
    pub type __qaddr_t = *mut __quad_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type time_t = __time_t;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_timespec {
        pub tv_sec: __time_t,
        pub tv_nsec: __syscall_slong_t,
    }
    impl ::std::clone::Clone for Struct_timespec {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_timespec {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pid_t = __pid_t;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_sched_param {
        pub __sched_priority: ::std::os::raw::c_int,
    }
    impl ::std::clone::Clone for Struct_sched_param {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_sched_param {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___sched_param {
        pub __sched_priority: ::std::os::raw::c_int,
    }
    impl ::std::clone::Clone for Struct___sched_param {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___sched_param {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __cpu_mask = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed3 {
        pub __bits: [__cpu_mask; 64usize],
    }
    impl ::std::clone::Clone for Struct_Unnamed3 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed3 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type cpu_set_t = Struct_Unnamed3;
    pub type clock_t = __clock_t;
    pub type clockid_t = __clockid_t;
    pub type timer_t = __timer_t;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_tm {
        pub tm_sec: ::std::os::raw::c_int,
        pub tm_min: ::std::os::raw::c_int,
        pub tm_hour: ::std::os::raw::c_int,
        pub tm_mday: ::std::os::raw::c_int,
        pub tm_mon: ::std::os::raw::c_int,
        pub tm_year: ::std::os::raw::c_int,
        pub tm_wday: ::std::os::raw::c_int,
        pub tm_yday: ::std::os::raw::c_int,
        pub tm_isdst: ::std::os::raw::c_int,
        pub tm_gmtoff: ::std::os::raw::c_long,
        pub tm_zone: *const ::std::os::raw::c_char,
    }
    impl ::std::clone::Clone for Struct_tm {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_tm {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_itimerspec {
        pub it_interval: Struct_timespec,
        pub it_value: Struct_timespec,
    }
    impl ::std::clone::Clone for Struct_itimerspec {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_itimerspec {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum Struct_sigevent { }
    pub enum Struct___locale_data { }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___locale_struct {
        pub __locales: [*mut Struct___locale_data; 13usize],
        pub __ctype_b: *const ::std::os::raw::c_ushort,
        pub __ctype_tolower: *const ::std::os::raw::c_int,
        pub __ctype_toupper: *const ::std::os::raw::c_int,
        pub __names: [*const ::std::os::raw::c_char; 13usize],
    }
    impl ::std::clone::Clone for Struct___locale_struct {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___locale_struct {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __locale_t = *mut Struct___locale_struct;
    pub type locale_t = __locale_t;
    pub type pthread_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_pthread_attr_t {
        pub _bindgen_data_: [u64; 7usize],
    }
    impl Union_pthread_attr_t {
        pub unsafe fn __size(&mut self)
         -> *mut [::std::os::raw::c_char; 56usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_pthread_attr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_pthread_attr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_attr_t = Union_pthread_attr_t;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___pthread_internal_list {
        pub __prev: *mut Struct___pthread_internal_list,
        pub __next: *mut Struct___pthread_internal_list,
    }
    impl ::std::clone::Clone for Struct___pthread_internal_list {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___pthread_internal_list {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __pthread_list_t = Struct___pthread_internal_list;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed4 {
        pub _bindgen_data_: [u64; 5usize],
    }
    impl Union_Unnamed4 {
        pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __size(&mut self)
         -> *mut [::std::os::raw::c_char; 40usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed4 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed4 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_short,
        pub __elision: ::std::os::raw::c_short,
        pub __list: __pthread_list_t,
    }
    impl ::std::clone::Clone for Struct___pthread_mutex_s {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___pthread_mutex_s {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_mutex_t = Union_Unnamed4;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed5 {
        pub _bindgen_data_: [u32; 1usize],
    }
    impl Union_Unnamed5 {
        pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed5 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed5 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_mutexattr_t = Union_Unnamed5;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed6 {
        pub _bindgen_data_: [u64; 6usize],
    }
    impl Union_Unnamed6 {
        pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed7 {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __size(&mut self)
         -> *mut [::std::os::raw::c_char; 48usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed6 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed6 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed7 {
        pub __lock: ::std::os::raw::c_int,
        pub __futex: ::std::os::raw::c_uint,
        pub __total_seq: ::std::os::raw::c_ulonglong,
        pub __wakeup_seq: ::std::os::raw::c_ulonglong,
        pub __woken_seq: ::std::os::raw::c_ulonglong,
        pub __mutex: *mut ::std::os::raw::c_void,
        pub __nwaiters: ::std::os::raw::c_uint,
        pub __broadcast_seq: ::std::os::raw::c_uint,
    }
    impl ::std::clone::Clone for Struct_Unnamed7 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed7 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_cond_t = Union_Unnamed6;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed8 {
        pub _bindgen_data_: [u32; 1usize],
    }
    impl Union_Unnamed8 {
        pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed8 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed8 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_condattr_t = Union_Unnamed8;
    pub type pthread_key_t = ::std::os::raw::c_uint;
    pub type pthread_once_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed9 {
        pub _bindgen_data_: [u64; 7usize],
    }
    impl Union_Unnamed9 {
        pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed10 {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __size(&mut self)
         -> *mut [::std::os::raw::c_char; 56usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed9 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed9 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed10 {
        pub __lock: ::std::os::raw::c_int,
        pub __nr_readers: ::std::os::raw::c_uint,
        pub __readers_wakeup: ::std::os::raw::c_uint,
        pub __writer_wakeup: ::std::os::raw::c_uint,
        pub __nr_readers_queued: ::std::os::raw::c_uint,
        pub __nr_writers_queued: ::std::os::raw::c_uint,
        pub __writer: ::std::os::raw::c_int,
        pub __shared: ::std::os::raw::c_int,
        pub __rwelision: ::std::os::raw::c_char,
        pub __pad1: [::std::os::raw::c_uchar; 7usize],
        pub __pad2: ::std::os::raw::c_ulong,
        pub __flags: ::std::os::raw::c_uint,
    }
    impl ::std::clone::Clone for Struct_Unnamed10 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed10 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_rwlock_t = Union_Unnamed9;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed11 {
        pub _bindgen_data_: [u64; 1usize],
    }
    impl Union_Unnamed11 {
        pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed11 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed11 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_rwlockattr_t = Union_Unnamed11;
    pub type pthread_spinlock_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed12 {
        pub _bindgen_data_: [u64; 4usize],
    }
    impl Union_Unnamed12 {
        pub unsafe fn __size(&mut self)
         -> *mut [::std::os::raw::c_char; 32usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed12 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed12 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_barrier_t = Union_Unnamed12;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed13 {
        pub _bindgen_data_: [u32; 1usize],
    }
    impl Union_Unnamed13 {
        pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed13 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed13 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type pthread_barrierattr_t = Union_Unnamed13;
    pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed14 {
        PTHREAD_CREATE_JOINABLE = 0,
        PTHREAD_CREATE_DETACHED = 1,
    }
    pub const PTHREAD_MUTEX_NORMAL: Enum_Unnamed15 =
        Enum_Unnamed15::PTHREAD_MUTEX_TIMED_NP;
    pub const PTHREAD_MUTEX_RECURSIVE: Enum_Unnamed15 =
        Enum_Unnamed15::PTHREAD_MUTEX_RECURSIVE_NP;
    pub const PTHREAD_MUTEX_ERRORCHECK: Enum_Unnamed15 =
        Enum_Unnamed15::PTHREAD_MUTEX_ERRORCHECK_NP;
    pub const PTHREAD_MUTEX_DEFAULT: Enum_Unnamed15 =
        Enum_Unnamed15::PTHREAD_MUTEX_TIMED_NP;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed15 {
        PTHREAD_MUTEX_TIMED_NP = 0,
        PTHREAD_MUTEX_RECURSIVE_NP = 1,
        PTHREAD_MUTEX_ERRORCHECK_NP = 2,
        PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    }
    pub const PTHREAD_MUTEX_STALLED_NP: Enum_Unnamed16 =
        Enum_Unnamed16::PTHREAD_MUTEX_STALLED;
    pub const PTHREAD_MUTEX_ROBUST_NP: Enum_Unnamed16 =
        Enum_Unnamed16::PTHREAD_MUTEX_ROBUST;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed16 {
        PTHREAD_MUTEX_STALLED = 0,
        PTHREAD_MUTEX_ROBUST = 1,
    }
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed17 {
        PTHREAD_PRIO_NONE = 0,
        PTHREAD_PRIO_INHERIT = 1,
        PTHREAD_PRIO_PROTECT = 2,
    }
    pub const PTHREAD_RWLOCK_DEFAULT_NP: Enum_Unnamed18 =
        Enum_Unnamed18::PTHREAD_RWLOCK_PREFER_READER_NP;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed18 {
        PTHREAD_RWLOCK_PREFER_READER_NP = 0,
        PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
        PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    }
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed19 {
        PTHREAD_INHERIT_SCHED = 0,
        PTHREAD_EXPLICIT_SCHED = 1,
    }
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed20 {
        PTHREAD_SCOPE_SYSTEM = 0,
        PTHREAD_SCOPE_PROCESS = 1,
    }
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed21 {
        PTHREAD_PROCESS_PRIVATE = 0,
        PTHREAD_PROCESS_SHARED = 1,
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__pthread_cleanup_buffer {
        pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)>,
        pub __arg: *mut ::std::os::raw::c_void,
        pub __canceltype: ::std::os::raw::c_int,
        pub __prev: *mut Struct__pthread_cleanup_buffer,
    }
    impl ::std::clone::Clone for Struct__pthread_cleanup_buffer {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__pthread_cleanup_buffer {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed22 {
        PTHREAD_CANCEL_ENABLE = 0,
        PTHREAD_CANCEL_DISABLE = 1,
    }
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed23 {
        PTHREAD_CANCEL_DEFERRED = 0,
        PTHREAD_CANCEL_ASYNCHRONOUS = 1,
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed24 {
        pub __cancel_jmp_buf: [Struct_Unnamed25; 1usize],
        pub __pad: [*mut ::std::os::raw::c_void; 4usize],
    }
    impl ::std::clone::Clone for Struct_Unnamed24 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed24 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed25 {
        pub __cancel_jmp_buf: __jmp_buf,
        pub __mask_was_saved: ::std::os::raw::c_int,
    }
    impl ::std::clone::Clone for Struct_Unnamed25 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed25 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __pthread_unwind_buf_t = Struct_Unnamed24;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___pthread_cleanup_frame {
        pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut ::std::os::raw::c_void)>,
        pub __cancel_arg: *mut ::std::os::raw::c_void,
        pub __do_it: ::std::os::raw::c_int,
        pub __cancel_type: ::std::os::raw::c_int,
    }
    impl ::std::clone::Clone for Struct___pthread_cleanup_frame {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___pthread_cleanup_frame {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum Struct___jmp_buf_tag { }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_celix_thread {
        pub threadInitialized: u8,
        pub thread: pthread_t,
    }
    impl ::std::clone::Clone for Struct_celix_thread {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_celix_thread {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type celix_thread_once_t = pthread_once_t;
    pub type celix_thread_t = Struct_celix_thread;
    pub type celix_thread_attr_t = pthread_attr_t;
    pub type celix_thread_start_t =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *mut ::std::os::raw::c_void)
                                  -> *mut ::std::os::raw::c_void>;
    pub type celix_thread_mutex_t = pthread_mutex_t;
    pub type celix_thread_mutexattr_t = pthread_mutexattr_t;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed26 {
        CELIX_THREAD_MUTEX_NORMAL = 0,
        CELIX_THREAD_MUTEX_RECURSIVE = 1,
        CELIX_THREAD_MUTEX_ERRORCHECK = 2,
        CELIX_THREAD_MUTEX_DEFAULT = 3,
    }
    pub type celix_thread_rwlock_t = pthread_rwlock_t;
    pub type celix_thread_rwlockattr_t = pthread_rwlockattr_t;
    pub type celix_thread_cond_t = pthread_cond_t;
    pub type celix_thread_condattr_t = pthread_condattr_t;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_remote_endpoint {
        pub serviceLock: celix_thread_mutex_t,
        pub service: *mut ::std::os::raw::c_void,
    }
    impl ::std::clone::Clone for Struct_remote_endpoint {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_remote_endpoint {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum Struct_arrayList { }
    pub type array_list_pt = *mut Struct_arrayList;
    pub enum Struct_arrayListIterator { }
    pub type array_list_iterator_pt = *mut Struct_arrayListIterator;
    pub type array_list_element_equals_pt =
        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                       *mut ::std::os::raw::c_void,
                                                   arg2:
                                                       *mut ::std::os::raw::c_void,
                                                   equals: *mut u8)
                                  -> celix_status_t>;
    pub type FILE = Struct__IO_FILE;
    pub type __FILE = Struct__IO_FILE;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed27 {
        pub __count: ::std::os::raw::c_int,
        pub __value: Union_Unnamed28,
    }
    impl ::std::clone::Clone for Struct_Unnamed27 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed27 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed28 {
        pub _bindgen_data_: [u32; 1usize],
    }
    impl Union_Unnamed28 {
        pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed28 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed28 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __mbstate_t = Struct_Unnamed27;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed29 {
        pub __pos: __off_t,
        pub __state: __mbstate_t,
    }
    impl ::std::clone::Clone for Struct_Unnamed29 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed29 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type _G_fpos_t = Struct_Unnamed29;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed30 {
        pub __pos: __off64_t,
        pub __state: __mbstate_t,
    }
    impl ::std::clone::Clone for Struct_Unnamed30 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed30 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type _G_fpos64_t = Struct_Unnamed30;
    pub enum Struct__IO_jump_t { }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__IO_marker {
        pub _next: *mut Struct__IO_marker,
        pub _sbuf: *mut Struct__IO_FILE,
        pub _pos: ::std::os::raw::c_int,
    }
    impl ::std::clone::Clone for Struct__IO_marker {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__IO_marker {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum___codecvt_result {
        __codecvt_ok = 0,
        __codecvt_partial = 1,
        __codecvt_error = 2,
        __codecvt_noconv = 3,
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut Struct__IO_marker,
        pub _chain: *mut Struct__IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: __off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_char,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut _IO_lock_t,
        pub _offset: __off64_t,
        pub __pad1: *mut ::std::os::raw::c_void,
        pub __pad2: *mut ::std::os::raw::c_void,
        pub __pad3: *mut ::std::os::raw::c_void,
        pub __pad4: *mut ::std::os::raw::c_void,
        pub __pad5: size_t,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    impl ::std::clone::Clone for Struct__IO_FILE {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__IO_FILE {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type _IO_FILE = Struct__IO_FILE;
    pub enum Struct__IO_FILE_plus { }
    pub type __io_read_fn =
        unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                             __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
            -> __ssize_t;
    pub type __io_write_fn =
        unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                             __buf: *const ::std::os::raw::c_char, __n: size_t)
            -> __ssize_t;
    pub type __io_seek_fn =
        unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                             __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int;
    pub type __io_close_fn =
        unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
            -> ::std::os::raw::c_int;
    pub type off_t = __off_t;
    pub type ssize_t = __ssize_t;
    pub type fpos_t = _G_fpos_t;
    pub enum Struct_hashMapEntry { }
    pub type hash_map_entry_pt = *mut Struct_hashMapEntry;
    pub enum Struct_hashMap { }
    pub type hash_map_pt = *mut Struct_hashMap;
    pub enum Struct_hashMapIterator { }
    pub type hash_map_iterator_pt = *mut Struct_hashMapIterator;
    pub enum Struct_hashMapKeySet { }
    pub type hash_map_key_set_pt = *mut Struct_hashMapKeySet;
    pub enum Struct_hashMapValues { }
    pub type hash_map_values_pt = *mut Struct_hashMapValues;
    pub enum Struct_hashMapEntrySet { }
    pub type hash_map_entry_set_pt = *mut Struct_hashMapEntrySet;
    pub type properties_pt = hash_map_pt;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_endpoint_description {
        pub frameworkUUID: *mut ::std::os::raw::c_char,
        pub id: *mut ::std::os::raw::c_char,
        pub service: *mut ::std::os::raw::c_char,
        pub properties: properties_pt,
        pub serviceId: ::std::os::raw::c_long,
    }
    impl ::std::clone::Clone for Struct_endpoint_description {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_endpoint_description {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type endpoint_description_pt = *mut Struct_endpoint_description;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_endpoint_listener {
        pub handle: *mut ::std::os::raw::c_void,
        pub endpointAdded: ::std::option::Option<unsafe extern "C" fn(handle:
                                                                          *mut ::std::os::raw::c_void,
                                                                      endpoint:
                                                                          endpoint_description_pt,
                                                                      machtedFilter:
                                                                          *mut ::std::os::raw::c_char)
                                                     -> celix_status_t>,
        pub endpointRemoved: ::std::option::Option<unsafe extern "C" fn(handle:
                                                                            *mut ::std::os::raw::c_void,
                                                                        endpoint:
                                                                            endpoint_description_pt,
                                                                        machtedFilter:
                                                                            *mut ::std::os::raw::c_char)
                                                       -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_endpoint_listener {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_endpoint_listener {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type endpoint_listener_pt = *mut Struct_endpoint_listener;
    pub enum Struct_serviceReference { }
    pub type service_reference_pt = *mut Struct_serviceReference;
    pub enum Struct_serviceRegistration { }
    pub type service_registration_pt = *mut Struct_serviceRegistration;
    pub enum Struct_serviceRegistry { }
    pub type service_registry_pt = *mut Struct_serviceRegistry;
    pub enum Struct_filter { }
    pub type filter_pt = *mut Struct_filter;
    pub type service_factory_pt = *mut Struct_service_factory;
    pub enum Struct_bundle { }
    pub type bundle_pt = *mut Struct_bundle;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_bundleState {
        OSGI_FRAMEWORK_BUNDLE_UNKNOWN = 0,
        OSGI_FRAMEWORK_BUNDLE_UNINSTALLED = 1,
        OSGI_FRAMEWORK_BUNDLE_INSTALLED = 2,
        OSGI_FRAMEWORK_BUNDLE_RESOLVED = 4,
        OSGI_FRAMEWORK_BUNDLE_STARTING = 8,
        OSGI_FRAMEWORK_BUNDLE_STOPPING = 16,
        OSGI_FRAMEWORK_BUNDLE_ACTIVE = 32,
    }
    pub type bundle_state_e = Enum_bundleState;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_manifest {
        pub mainAttributes: properties_pt,
        pub attributes: hash_map_pt,
    }
    impl ::std::clone::Clone for Struct_manifest {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_manifest {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type manifest_pt = *mut Struct_manifest;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_framework_log_level {
        OSGI_FRAMEWORK_LOG_ERROR = 1,
        OSGI_FRAMEWORK_LOG_WARNING = 2,
        OSGI_FRAMEWORK_LOG_INFO = 3,
        OSGI_FRAMEWORK_LOG_DEBUG = 4,
    }
    pub type framework_log_level_t = Enum_framework_log_level;
    pub type framework_logger_pt = *mut Struct_framework_logger;
    pub type framework_log_function_pt =
        ::std::option::Option<unsafe extern "C" fn(level: framework_log_level_t,
                                                   func:
                                                       *const ::std::os::raw::c_char,
                                                   file:
                                                       *const ::std::os::raw::c_char,
                                                   line: ::std::os::raw::c_int,
                                                   msg:
                                                       *mut ::std::os::raw::c_char)
                                  -> celix_status_t>;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_framework_logger {
        pub logFunction: framework_log_function_pt,
    }
    impl ::std::clone::Clone for Struct_framework_logger {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_framework_logger {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum Struct_bundleRevision { }
    pub type bundle_revision_pt = *mut Struct_bundleRevision;
    pub enum Struct_bundleArchive { }
    pub type bundle_archive_pt = *mut Struct_bundleArchive;
    pub enum Struct_activator { }
    pub type activator_pt = *mut Struct_activator;
    pub enum Struct_framework { }
    pub type framework_pt = *mut Struct_framework;
    pub enum Struct_wire { }
    pub type wire_pt = *mut Struct_wire;
    pub enum Struct_requirement { }
    pub type requirement_pt = *mut Struct_requirement;
    pub enum Struct_capability { }
    pub type capability_pt = *mut Struct_capability;
    pub enum Struct_module { }
    pub type module_pt = *mut Struct_module;
    pub enum Struct_linked_list_entry { }
    pub type linked_list_entry_pt = *mut Struct_linked_list_entry;
    pub enum Struct_linked_list { }
    pub type linked_list_pt = *mut Struct_linked_list;
    pub enum Struct_version { }
    pub type version_pt = *mut Struct_version;
    pub enum Struct_versionRange { }
    pub type version_range_pt = *mut Struct_versionRange;
    pub enum Struct_bundleContext { }
    pub type bundle_context_pt = *mut Struct_bundleContext;
    pub type service_listener_pt = *mut Struct_serviceListener;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_serviceEventType {
        OSGI_FRAMEWORK_SERVICE_EVENT_REGISTERED = 1,
        OSGI_FRAMEWORK_SERVICE_EVENT_MODIFIED = 2,
        OSGI_FRAMEWORK_SERVICE_EVENT_UNREGISTERING = 4,
        OSGI_FRAMEWORK_SERVICE_EVENT_MODIFIED_ENDMATCH = 8,
    }
    pub type service_event_type_e = Enum_serviceEventType;
    pub type service_event_pt = *mut Struct_serviceEvent;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_serviceEvent {
        pub reference: service_reference_pt,
        pub _type: service_event_type_e,
    }
    impl ::std::clone::Clone for Struct_serviceEvent {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_serviceEvent {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_serviceListener {
        pub handle: *mut ::std::os::raw::c_void,
        pub serviceChanged: ::std::option::Option<unsafe extern "C" fn(listener:
                                                                           *mut ::std::os::raw::c_void,
                                                                       event:
                                                                           service_event_pt)
                                                      -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_serviceListener {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_serviceListener {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type bundle_listener_pt = *mut Struct_bundle_listener;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_bundle_event_type {
        OSGI_FRAMEWORK_BUNDLE_EVENT_INSTALLED = 1,
        OSGI_FRAMEWORK_BUNDLE_EVENT_STARTED = 2,
        OSGI_FRAMEWORK_BUNDLE_EVENT_STOPPED = 4,
        OSGI_FRAMEWORK_BUNDLE_EVENT_UPDATED = 8,
        OSGI_FRAMEWORK_BUNDLE_EVENT_UNINSTALLED = 16,
        OSGI_FRAMEWORK_BUNDLE_EVENT_RESOLVED = 32,
        OSGI_FRAMEWORK_BUNDLE_EVENT_UNRESOLVED = 64,
        OSGI_FRAMEWORK_BUNDLE_EVENT_STARTING = 128,
        OSGI_FRAMEWORK_BUNDLE_EVENT_STOPPING = 256,
        OSGI_FRAMEWORK_BUNDLE_EVENT_LAZY_ACTIVATION = 512,
    }
    pub type bundle_event_type_e = Enum_bundle_event_type;
    pub type bundle_event_pt = *mut Struct_bundle_event;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_bundle_event {
        pub bundleId: ::std::os::raw::c_long,
        pub bundleSymbolicName: *mut ::std::os::raw::c_char,
        pub _type: bundle_event_type_e,
    }
    impl ::std::clone::Clone for Struct_bundle_event {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_bundle_event {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_bundle_listener {
        pub handle: *mut ::std::os::raw::c_void,
        pub bundleChanged: ::std::option::Option<unsafe extern "C" fn(listener:
                                                                          *mut ::std::os::raw::c_void,
                                                                      event:
                                                                          bundle_event_pt)
                                                     -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_bundle_listener {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_bundle_listener {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type framework_listener_pt = *mut Struct_framework_listener;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_framework_event_type {
        OSGI_FRAMEWORK_EVENT_STARTED = 1,
        OSGI_FRAMEWORK_EVENT_ERROR = 2,
        OSGI_FRAMEWORK_EVENT_PACKAGES_REFRESHED = 4,
        OSGI_FRAMEWORK_EVENT_STARTLEVEL_CHANGED = 8,
        OSGI_FRAMEWORK_EVENT_WARNING = 16,
        OSGI_FRAMEWORK_EVENT_INFO = 32,
        OSGI_FRAMEWORK_EVENT_STOPPED = 64,
        OSGI_FRAMEWORK_EVENT_STOPPED_UPDATE = 128,
        OSGI_FRAMEWORK_EVENT_STOPPED_BOOTCLASSPATH_MODIFIED = 256,
        OSGI_FRAMEWORK_EVENT_WAIT_TIMEDOUT = 512,
    }
    pub type framework_event_type_e = Enum_framework_event_type;
    pub type framework_event_pt = *mut Struct_framework_event;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_framework_event {
        pub bundleId: ::std::os::raw::c_long,
        pub bundleSymbolicName: *mut ::std::os::raw::c_char,
        pub _type: framework_event_type_e,
        pub errorCode: celix_status_t,
        pub error: *mut ::std::os::raw::c_char,
    }
    impl ::std::clone::Clone for Struct_framework_event {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_framework_event {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_framework_listener {
        pub handle: *mut ::std::os::raw::c_void,
        pub frameworkEvent: ::std::option::Option<unsafe extern "C" fn(listener:
                                                                           *mut ::std::os::raw::c_void,
                                                                       event:
                                                                           framework_event_pt)
                                                      -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_framework_listener {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_framework_listener {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_service_factory {
        pub handle: *mut ::std::os::raw::c_void,
        pub getService: ::std::option::Option<unsafe extern "C" fn(handle:
                                                                       *mut ::std::os::raw::c_void,
                                                                   bundle:
                                                                       bundle_pt,
                                                                   registration:
                                                                       service_registration_pt,
                                                                   service:
                                                                       *mut *mut ::std::os::raw::c_void)
                                                  -> celix_status_t>,
        pub ungetService: ::std::option::Option<unsafe extern "C" fn(handle:
                                                                         *mut ::std::os::raw::c_void,
                                                                     bundle:
                                                                         bundle_pt,
                                                                     registration:
                                                                         service_registration_pt,
                                                                     service:
                                                                         *mut *mut ::std::os::raw::c_void)
                                                    -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_service_factory {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_service_factory {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type serviceChanged_function_pt =
        ::std::option::Option<extern "C" fn(arg1: framework_pt,
                                            arg2: service_event_type_e,
                                            arg3: service_registration_pt,
                                            arg4: properties_pt)>;
    pub enum Struct_export_registration { }
    pub type export_registration_pt = *mut Struct_export_registration;
    pub enum Struct_export_reference { }
    pub type export_reference_pt = *mut Struct_export_reference;
    pub enum Struct_import_registration { }
    pub type import_registration_pt = *mut Struct_import_registration;
    pub enum Struct_import_reference { }
    pub type import_reference_pt = *mut Struct_import_reference;
    pub enum Struct_import_registration_factory { }
    pub type import_registration_factory_pt =
        *mut Struct_import_registration_factory;
    pub enum Struct_remote_service_admin { }
    pub type remote_service_admin_pt = *mut Struct_remote_service_admin;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_remote_service_admin_service {
        pub admin: remote_service_admin_pt,
        pub exportService: ::std::option::Option<unsafe extern "C" fn(admin:
                                                                          remote_service_admin_pt,
                                                                      serviceId:
                                                                          *mut ::std::os::raw::c_char,
                                                                      properties:
                                                                          properties_pt,
                                                                      registrations:
                                                                          *mut array_list_pt)
                                                     -> celix_status_t>,
        pub removeExportedService: ::std::option::Option<extern "C" fn(admin:
                                                                           remote_service_admin_pt,
                                                                       registration:
                                                                           export_registration_pt)
                                                             -> celix_status_t>,
        pub getExportedServices: ::std::option::Option<unsafe extern "C" fn(admin:
                                                                                remote_service_admin_pt,
                                                                            services:
                                                                                *mut array_list_pt)
                                                           -> celix_status_t>,
        pub getImportedEndpoints: ::std::option::Option<unsafe extern "C" fn(admin:
                                                                                 remote_service_admin_pt,
                                                                             services:
                                                                                 *mut array_list_pt)
                                                            -> celix_status_t>,
        pub importService: ::std::option::Option<unsafe extern "C" fn(admin:
                                                                          remote_service_admin_pt,
                                                                      endpoint:
                                                                          endpoint_description_pt,
                                                                      registration:
                                                                          *mut import_registration_pt)
                                                     -> celix_status_t>,
        pub exportReference_getExportedEndpoint: ::std::option::Option<unsafe extern "C" fn(reference:
                                                                                                export_reference_pt,
                                                                                            endpoint:
                                                                                                *mut endpoint_description_pt)
                                                                           ->
                                                                               celix_status_t>,
        pub exportReference_getExportedService: ::std::option::Option<unsafe extern "C" fn(reference:
                                                                                               export_reference_pt,
                                                                                           service:
                                                                                               *mut service_reference_pt)
                                                                          ->
                                                                              celix_status_t>,
        pub exportRegistration_close: ::std::option::Option<extern "C" fn(admin:
                                                                              remote_service_admin_pt,
                                                                          registration:
                                                                              export_registration_pt)
                                                                ->
                                                                    celix_status_t>,
        pub exportRegistration_getException: ::std::option::Option<extern "C" fn(registration:
                                                                                     export_registration_pt)
                                                                       ->
                                                                           celix_status_t>,
        pub exportRegistration_getExportReference: ::std::option::Option<unsafe extern "C" fn(registration:
                                                                                                  export_registration_pt,
                                                                                              reference:
                                                                                                  *mut export_reference_pt)
                                                                             ->
                                                                                 celix_status_t>,
        pub exportRegistration_freeExportReference: ::std::option::Option<unsafe extern "C" fn(reference:
                                                                                                   *mut export_reference_pt)
                                                                              ->
                                                                                  celix_status_t>,
        pub exportRegistration_getEndpointDescription: ::std::option::Option<extern "C" fn(registration:
                                                                                               export_registration_pt,
                                                                                           endpointDescription:
                                                                                               endpoint_description_pt)
                                                                                 ->
                                                                                     celix_status_t>,
        pub importReference_getImportedEndpoint: ::std::option::Option<extern "C" fn(reference:
                                                                                         import_reference_pt)
                                                                           ->
                                                                               celix_status_t>,
        pub importReference_getImportedService: ::std::option::Option<extern "C" fn(reference:
                                                                                        import_reference_pt)
                                                                          ->
                                                                              celix_status_t>,
        pub importRegistration_close: ::std::option::Option<extern "C" fn(admin:
                                                                              remote_service_admin_pt,
                                                                          registration:
                                                                              import_registration_pt)
                                                                ->
                                                                    celix_status_t>,
        pub importRegistration_getException: ::std::option::Option<extern "C" fn(registration:
                                                                                     import_registration_pt)
                                                                       ->
                                                                           celix_status_t>,
        pub importRegistration_getImportReference: ::std::option::Option<unsafe extern "C" fn(registration:
                                                                                                  import_registration_pt,
                                                                                              reference:
                                                                                                  *mut import_reference_pt)
                                                                             ->
                                                                                 celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_remote_service_admin_service {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_remote_service_admin_service {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type remote_service_admin_service_pt =
        *mut Struct_remote_service_admin_service;
    pub type sendToHandle =
        ::std::option::Option<unsafe extern "C" fn(remote_service_admin_ptr:
                                                       remote_service_admin_pt,
                                                   endpointDescription:
                                                       endpoint_description_pt,
                                                   request:
                                                       *mut ::std::os::raw::c_char,
                                                   reply:
                                                       *mut *mut ::std::os::raw::c_char,
                                                   replyStatus:
                                                       *mut ::std::os::raw::c_int)
                                  -> celix_status_t>;
    pub type createProxyService =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   endpointDescription:
                                                       endpoint_description_pt,
                                                   rsa: remote_service_admin_pt,
                                                   sendToCallback: sendToHandle,
                                                   properties: properties_pt,
                                                   service:
                                                       *mut *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type destroyProxyService =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type remote_proxy_factory_pt = *mut Struct_remote_proxy_factory;
    pub type remote_proxy_factory_service_pt =
        *mut Struct_remote_proxy_factory_service;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_remote_proxy_factory {
        pub context_ptr: bundle_context_pt,
        pub service: *mut ::std::os::raw::c_char,
        pub remote_proxy_factory_service_ptr: remote_proxy_factory_service_pt,
        pub properties: properties_pt,
        pub registration: service_registration_pt,
        pub proxy_instances: hash_map_pt,
        pub handle: *mut ::std::os::raw::c_void,
        pub create_proxy_service_ptr: createProxyService,
        pub destroy_proxy_service_ptr: destroyProxyService,
    }
    impl ::std::clone::Clone for Struct_remote_proxy_factory {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_remote_proxy_factory {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_remote_proxy_factory_service {
        pub factory: remote_proxy_factory_pt,
        pub registerProxyService: ::std::option::Option<extern "C" fn(proxyFactoryService:
                                                                          remote_proxy_factory_pt,
                                                                      endpoint:
                                                                          endpoint_description_pt,
                                                                      remote_service_admin_ptr:
                                                                          remote_service_admin_pt,
                                                                      callback:
                                                                          sendToHandle)
                                                            -> celix_status_t>,
        pub unregisterProxyService: ::std::option::Option<extern "C" fn(proxyFactoryService:
                                                                            remote_proxy_factory_pt,
                                                                        endpoint:
                                                                            endpoint_description_pt)
                                                              -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_remote_proxy_factory_service {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_remote_proxy_factory_service {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum Struct_shell { }
    pub type shell_pt = *mut Struct_shell;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_shellService {
        pub shell: shell_pt,
        pub getCommands: ::std::option::Option<unsafe extern "C" fn(shell_ptr:
                                                                        shell_pt,
                                                                    commands_ptr:
                                                                        *mut array_list_pt)
                                                   -> celix_status_t>,
        pub getCommandUsage: ::std::option::Option<unsafe extern "C" fn(shell_ptr:
                                                                            shell_pt,
                                                                        command_name_str:
                                                                            *mut ::std::os::raw::c_char,
                                                                        usage_str:
                                                                            *mut *mut ::std::os::raw::c_char)
                                                       -> celix_status_t>,
        pub getCommandDescription: ::std::option::Option<unsafe extern "C" fn(shell_ptr:
                                                                                  shell_pt,
                                                                              command_name_str:
                                                                                  *mut ::std::os::raw::c_char,
                                                                              command_description_str:
                                                                                  *mut *mut ::std::os::raw::c_char)
                                                             -> celix_status_t>,
        pub getCommandReference: ::std::option::Option<unsafe extern "C" fn(shell_ptr:
                                                                                shell_pt,
                                                                            command_name_str:
                                                                                *mut ::std::os::raw::c_char,
                                                                            command_reference_ptr:
                                                                                *mut service_reference_pt)
                                                           -> celix_status_t>,
        pub executeCommand: ::std::option::Option<unsafe extern "C" fn(shell_ptr:
                                                                           shell_pt,
                                                                       command_line_str:
                                                                           *mut ::std::os::raw::c_char,
                                                                       out:
                                                                           *mut FILE,
                                                                       err:
                                                                           *mut FILE)
                                                      -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_shellService {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_shellService {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type shell_service_pt = *mut Struct_shellService;
    pub type command_service_pt = *mut Struct_commandService;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_commandService {
        pub handle: *mut ::std::os::raw::c_void,
        pub executeCommand: ::std::option::Option<unsafe extern "C" fn(handle:
                                                                           *mut ::std::os::raw::c_void,
                                                                       commandLine:
                                                                           *mut ::std::os::raw::c_char,
                                                                       outStream:
                                                                           *mut FILE,
                                                                       errorStream:
                                                                           *mut FILE)
                                                      -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_commandService {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_commandService {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum Struct_log_service_data { }
    pub type log_service_data_pt = *mut Struct_log_service_data;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_log_level {
        OSGI_LOGSERVICE_ERROR = 1,
        OSGI_LOGSERVICE_WARNING = 2,
        OSGI_LOGSERVICE_INFO = 3,
        OSGI_LOGSERVICE_DEBUG = 4,
    }
    pub type log_level_t = Enum_log_level;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_log_service {
        pub logger: log_service_data_pt,
        pub log: ::std::option::Option<unsafe extern "C" fn(logger:
                                                                log_service_data_pt,
                                                            level: log_level_t,
                                                            message:
                                                                *mut ::std::os::raw::c_char)
                                           -> celix_status_t>,
        pub logSr: ::std::option::Option<unsafe extern "C" fn(logger:
                                                                  log_service_data_pt,
                                                              reference:
                                                                  service_reference_pt,
                                                              level: log_level_t,
                                                              message:
                                                                  *mut ::std::os::raw::c_char)
                                             -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_log_service {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_log_service {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type log_service_pt = *mut Struct_log_service;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_log_entry {
        pub errorCode: ::std::os::raw::c_int,
        pub level: log_level_t,
        pub message: *mut ::std::os::raw::c_char,
        pub time: time_t,
        pub bundleId: ::std::os::raw::c_long,
        pub bundleSymbolicName: *mut ::std::os::raw::c_char,
    }
    impl ::std::clone::Clone for Struct_log_entry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_log_entry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type log_entry_pt = *mut Struct_log_entry;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_log_listener {
        pub handle: *mut ::std::os::raw::c_void,
        pub logged: ::std::option::Option<unsafe extern "C" fn(listener:
                                                                   *mut Struct_log_listener,
                                                               entry:
                                                                   log_entry_pt)
                                              -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_log_listener {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_log_listener {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type log_listener_pt = *mut Struct_log_listener;
    pub enum Struct_log_reader_data { }
    pub type log_reader_data_pt = *mut Struct_log_reader_data;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_log_reader_service {
        pub reader: log_reader_data_pt,
        pub getLog: ::std::option::Option<unsafe extern "C" fn(reader:
                                                                   log_reader_data_pt,
                                                               list:
                                                                   *mut linked_list_pt)
                                              -> celix_status_t>,
        pub addLogListener: ::std::option::Option<extern "C" fn(reader:
                                                                    log_reader_data_pt,
                                                                listener:
                                                                    log_listener_pt)
                                                      -> celix_status_t>,
        pub removeLogListener: ::std::option::Option<extern "C" fn(reader:
                                                                       log_reader_data_pt,
                                                                   listener:
                                                                       log_listener_pt)
                                                         -> celix_status_t>,
        pub removeAllLogListener: ::std::option::Option<extern "C" fn(reader:
                                                                          log_reader_data_pt)
                                                            -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_log_reader_service {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_log_reader_service {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type log_reader_service_pt = *mut Struct_log_reader_service;
    pub enum Struct_log_helper { }
    pub type log_helper_pt = *mut Struct_log_helper;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_dm_service_dependency_info {
        pub filter: *mut ::std::os::raw::c_char,
        pub available: u8,
        pub required: u8,
        pub count: size_t,
    }
    impl ::std::clone::Clone for Struct_dm_service_dependency_info {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_dm_service_dependency_info {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type dm_service_dependency_info_pt =
        *mut Struct_dm_service_dependency_info;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_dm_component_info {
        pub id: [::std::os::raw::c_char; 64usize],
        pub name: [::std::os::raw::c_char; 128usize],
        pub active: u8,
        pub state: *mut ::std::os::raw::c_char,
        pub interfaces: array_list_pt,
        pub dependency_list: array_list_pt,
    }
    impl ::std::clone::Clone for Struct_dm_component_info {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_dm_component_info {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type dm_component_info_pt = *mut Struct_dm_component_info;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_dm_dependency_manager_info {
        pub components: array_list_pt,
    }
    impl ::std::clone::Clone for Struct_dm_dependency_manager_info {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_dm_dependency_manager_info {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type dm_dependency_manager_info_pt =
        *mut Struct_dm_dependency_manager_info;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_dm_info_service {
        pub handle: *mut ::std::os::raw::c_void,
        pub getInfo: ::std::option::Option<unsafe extern "C" fn(handle:
                                                                    *mut ::std::os::raw::c_void,
                                                                info:
                                                                    *mut dm_dependency_manager_info_pt)
                                               -> celix_status_t>,
        pub destroyInfo: ::std::option::Option<unsafe extern "C" fn(handle:
                                                                        *mut ::std::os::raw::c_void,
                                                                    info:
                                                                        dm_dependency_manager_info_pt)>,
    }
    impl ::std::clone::Clone for Struct_dm_info_service {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_dm_info_service {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type dm_info_service_pt = *mut Struct_dm_info_service;
    pub enum Struct_dm_service_dependency { }
    pub type dm_service_dependency_pt = *mut Struct_dm_service_dependency;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_dm_service_dependency_strategy_enum {
        DM_SERVICE_DEPENDENCY_STRATEGY_LOCKING = 0,
        DM_SERVICE_DEPENDENCY_STRATEGY_SUSPEND = 1,
    }
    pub type dm_service_dependency_strategy_t =
        Enum_dm_service_dependency_strategy_enum;
    pub type service_set_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub type service_add_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub type service_change_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub type service_remove_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub type service_swap_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   oldService:
                                                       *mut ::std::os::raw::c_void,
                                                   newService:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub type service_set_with_ref_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   reference:
                                                       service_reference_pt,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type service_add_with_ref_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   reference:
                                                       service_reference_pt,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type service_change_with_ref_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   reference:
                                                       service_reference_pt,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type service_remove_with_ref_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   reference:
                                                       service_reference_pt,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type service_swap_with_ref_fpt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   oldReference:
                                                       service_reference_pt,
                                                   oldService:
                                                       *mut ::std::os::raw::c_void,
                                                   newReference:
                                                       service_reference_pt,
                                                   newService:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub enum Struct_dm_component_struct { }
    pub type dm_component_pt = *mut Struct_dm_component_struct;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_dm_component_state_enum {
        DM_CMP_STATE_INACTIVE = 1,
        DM_CMP_STATE_WAITING_FOR_REQUIRED = 2,
        DM_CMP_STATE_INSTANTIATED_AND_WAITING_FOR_REQUIRED = 3,
        DM_CMP_STATE_TRACKING_OPTIONAL = 4,
    }
    pub type dm_component_state_t = Enum_dm_component_state_enum;
    pub type init_fpt =
        ::std::option::Option<unsafe extern "C" fn(userData:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub type start_fpt =
        ::std::option::Option<unsafe extern "C" fn(userData:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub type stop_fpt =
        ::std::option::Option<unsafe extern "C" fn(userData:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub type deinit_fpt =
        ::std::option::Option<unsafe extern "C" fn(userData:
                                                       *mut ::std::os::raw::c_void)
                                  -> ::std::os::raw::c_int>;
    pub enum Struct_dm_dependency_manager { }
    pub type dm_dependency_manager_pt = *mut Struct_dm_dependency_manager;
    pub enum Struct_listener_hook { }
    pub type listener_hook_pt = *mut Struct_listener_hook;
    pub type listener_hook_info_pt = *mut Struct_listener_hook_info;
    pub type listener_hook_service_pt = *mut Struct_listener_hook_service;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_listener_hook_info {
        pub context: bundle_context_pt,
        pub filter: *mut ::std::os::raw::c_char,
        pub removed: u8,
    }
    impl ::std::clone::Clone for Struct_listener_hook_info {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_listener_hook_info {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_listener_hook_service {
        pub handle: *mut ::std::os::raw::c_void,
        pub added: ::std::option::Option<unsafe extern "C" fn(hook:
                                                                  *mut ::std::os::raw::c_void,
                                                              listeners:
                                                                  array_list_pt)
                                             -> celix_status_t>,
        pub removed: ::std::option::Option<unsafe extern "C" fn(hook:
                                                                    *mut ::std::os::raw::c_void,
                                                                listeners:
                                                                    array_list_pt)
                                               -> celix_status_t>,
    }
    impl ::std::clone::Clone for Struct_listener_hook_service {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_listener_hook_service {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type adding_callback_pt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   reference:
                                                       service_reference_pt,
                                                   service:
                                                       *mut *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type added_callback_pt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   reference:
                                                       service_reference_pt,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type modified_callback_pt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   reference:
                                                       service_reference_pt,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub type removed_callback_pt =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   reference:
                                                       service_reference_pt,
                                                   service:
                                                       *mut ::std::os::raw::c_void)
                                  -> celix_status_t>;
    pub enum Struct_serviceTrackerCustomizer { }
    pub type service_tracker_customizer_pt = *mut Struct_serviceTrackerCustomizer;
    pub enum Struct_serviceTracker { }
    pub type service_tracker_pt = *mut Struct_serviceTracker;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_Unnamed31 {
        _ISupper = 256,
        _ISlower = 512,
        _ISalpha = 1024,
        _ISdigit = 2048,
        _ISxdigit = 4096,
        _ISspace = 8192,
        _ISprint = 16384,
        _ISgraph = 32768,
        _ISblank = 1,
        _IScntrl = 2,
        _ISpunct = 4,
        _ISalnum = 8,
    }
    pub enum Struct_linkedListIterator { }
    pub type linked_list_iterator_pt = *mut Struct_linkedListIterator;
    pub enum Struct_thpool_ { }
    pub type threadpool = *mut Struct_thpool_;
    pub type logf_ft =
        ::std::option::Option<unsafe extern "C" fn(handle:
                                                       *mut ::std::os::raw::c_void,
                                                   level: ::std::os::raw::c_int,
                                                   file:
                                                       *const ::std::os::raw::c_char,
                                                   line: ::std::os::raw::c_int,
                                                   format:
                                                       *const ::std::os::raw::c_char, ...)>;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_namvals_head {
        pub tqh_first: *mut Struct_namval_entry,
        pub tqh_last: *mut *mut Struct_namval_entry,
    }
    impl ::std::clone::Clone for Struct_namvals_head {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_namvals_head {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_namval_entry {
        pub name: *mut ::std::os::raw::c_char,
        pub value: *mut ::std::os::raw::c_char,
        pub entries: Struct_Unnamed32,
    }
    impl ::std::clone::Clone for Struct_namval_entry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_namval_entry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed32 {
        pub tqe_next: *mut Struct_namval_entry,
        pub tqe_prev: *mut *mut Struct_namval_entry,
    }
    impl ::std::clone::Clone for Struct_Unnamed32 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed32 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type int8_t = ::std::os::raw::c_char;
    pub type int16_t = ::std::os::raw::c_short;
    pub type int32_t = ::std::os::raw::c_int;
    pub type int64_t = ::std::os::raw::c_long;
    pub type uint8_t = ::std::os::raw::c_uchar;
    pub type uint16_t = ::std::os::raw::c_ushort;
    pub type uint32_t = ::std::os::raw::c_uint;
    pub type uint64_t = ::std::os::raw::c_ulong;
    pub type int_least8_t = ::std::os::raw::c_char;
    pub type int_least16_t = ::std::os::raw::c_short;
    pub type int_least32_t = ::std::os::raw::c_int;
    pub type int_least64_t = ::std::os::raw::c_long;
    pub type uint_least8_t = ::std::os::raw::c_uchar;
    pub type uint_least16_t = ::std::os::raw::c_ushort;
    pub type uint_least32_t = ::std::os::raw::c_uint;
    pub type uint_least64_t = ::std::os::raw::c_ulong;
    pub type int_fast8_t = ::std::os::raw::c_char;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intptr_t = ::std::os::raw::c_long;
    pub type uintptr_t = ::std::os::raw::c_ulong;
    pub type intmax_t = ::std::os::raw::c_long;
    pub type uintmax_t = ::std::os::raw::c_ulong;
    pub enum Struct__dyn_type { }
    pub type dyn_type = Struct__dyn_type;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_types_head {
        pub tqh_first: *mut Struct_type_entry,
        pub tqh_last: *mut *mut Struct_type_entry,
    }
    impl ::std::clone::Clone for Struct_types_head {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_types_head {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_type_entry {
        pub _type: *mut dyn_type,
        pub entries: Struct_Unnamed33,
    }
    impl ::std::clone::Clone for Struct_type_entry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_type_entry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed33 {
        pub tqe_next: *mut Struct_type_entry,
        pub tqe_prev: *mut *mut Struct_type_entry,
    }
    impl ::std::clone::Clone for Struct_Unnamed33 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed33 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_complex_type_entries_head {
        pub tqh_first: *mut Struct_complex_type_entry,
        pub tqh_last: *mut *mut Struct_complex_type_entry,
    }
    impl ::std::clone::Clone for Struct_complex_type_entries_head {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_complex_type_entries_head {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_complex_type_entry {
        pub _type: *mut dyn_type,
        pub name: *mut ::std::os::raw::c_char,
        pub entries: Struct_Unnamed34,
    }
    impl ::std::clone::Clone for Struct_complex_type_entry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_complex_type_entry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed34 {
        pub tqe_next: *mut Struct_complex_type_entry,
        pub tqe_prev: *mut *mut Struct_complex_type_entry,
    }
    impl ::std::clone::Clone for Struct_Unnamed34 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed34 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum Struct__dyn_function_type { }
    pub type dyn_function_type = Struct__dyn_function_type;
    #[derive(Clone, Copy)]
    #[repr(u32)]
    pub enum Enum_dyn_function_argument_meta {
        DYN_FUNCTION_ARGUMENT_META__STD = 0,
        DYN_FUNCTION_ARGUMENT_META__HANDLE = 1,
        DYN_FUNCTION_ARGUMENT_META__PRE_ALLOCATED_OUTPUT = 2,
        DYN_FUNCTION_ARGUMENT_META__OUTPUT = 3,
    }
    pub enum Struct__dyn_interface_type { }
    pub type dyn_interface_type = Struct__dyn_interface_type;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_methods_head {
        pub tqh_first: *mut Struct_method_entry,
        pub tqh_last: *mut *mut Struct_method_entry,
    }
    impl ::std::clone::Clone for Struct_methods_head {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_methods_head {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_method_entry {
        pub index: ::std::os::raw::c_int,
        pub id: *mut ::std::os::raw::c_char,
        pub name: *mut ::std::os::raw::c_char,
        pub dynFunc: *mut dyn_function_type,
        pub entries: Struct_Unnamed35,
    }
    impl ::std::clone::Clone for Struct_method_entry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_method_entry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed35 {
        pub tqe_next: *mut Struct_method_entry,
        pub tqe_prev: *mut *mut Struct_method_entry,
    }
    impl ::std::clone::Clone for Struct_Unnamed35 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed35 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum dyn_message_type { }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_wait {
        pub _bindgen_data_: [u32; 1usize],
    }
    impl Union_wait {
        pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed36 {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed37 {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_wait {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_wait {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed36 {
        pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    }
    impl ::std::clone::Clone for Struct_Unnamed36 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed36 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed37 {
        pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    }
    impl ::std::clone::Clone for Struct_Unnamed37 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed37 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    extern "C" {
        pub fn celix_strerror(errorcode: celix_status_t,
                              buffer: *mut ::std::os::raw::c_char,
                              bufferSize: size_t) -> *mut ::std::os::raw::c_char;
        pub fn celixThread_create(new_thread: *mut celix_thread_t,
                                  attr: *mut celix_thread_attr_t,
                                  func: celix_thread_start_t,
                                  data: *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn celixThread_exit(exitStatus: *mut ::std::os::raw::c_void);
        pub fn celixThread_detach(thread: celix_thread_t) -> celix_status_t;
        pub fn celixThread_join(thread: celix_thread_t,
                                status: *mut *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn celixThread_kill(thread: celix_thread_t,
                                sig: ::std::os::raw::c_int) -> celix_status_t;
        pub fn celixThread_self() -> celix_thread_t;
        pub fn celixThread_equals(thread1: celix_thread_t,
                                  thread2: celix_thread_t)
         -> ::std::os::raw::c_int;
        pub fn celixThread_initalized(thread: celix_thread_t) -> u8;
        pub fn celixThreadMutex_create(mutex: *mut celix_thread_mutex_t,
                                       attr: *mut celix_thread_mutexattr_t)
         -> celix_status_t;
        pub fn celixThreadMutex_destroy(mutex: *mut celix_thread_mutex_t)
         -> celix_status_t;
        pub fn celixThreadMutex_lock(mutex: *mut celix_thread_mutex_t)
         -> celix_status_t;
        pub fn celixThreadMutex_unlock(mutex: *mut celix_thread_mutex_t)
         -> celix_status_t;
        pub fn celixThreadMutexAttr_create(attr: *mut celix_thread_mutexattr_t)
         -> celix_status_t;
        pub fn celixThreadMutexAttr_destroy(attr: *mut celix_thread_mutexattr_t)
         -> celix_status_t;
        pub fn celixThreadMutexAttr_settype(attr: *mut celix_thread_mutexattr_t,
                                            _type: ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn celixThreadRwlock_create(lock: *mut celix_thread_rwlock_t,
                                        attr: *mut celix_thread_rwlockattr_t)
         -> celix_status_t;
        pub fn celixThreadRwlock_destroy(lock: *mut celix_thread_rwlock_t)
         -> celix_status_t;
        pub fn celixThreadRwlock_readLock(lock: *mut celix_thread_rwlock_t)
         -> celix_status_t;
        pub fn celixThreadRwlock_writeLock(lock: *mut celix_thread_rwlock_t)
         -> celix_status_t;
        pub fn celixThreadRwlock_unlock(lock: *mut celix_thread_rwlock_t)
         -> celix_status_t;
        pub fn celixThreadRwlockAttr_create(attr: *mut celix_thread_rwlockattr_t)
         -> celix_status_t;
        pub fn celixThreadRwlockAttr_destroy(attr: *mut celix_thread_rwlockattr_t)
         -> celix_status_t;
        pub fn celixThreadCondition_init(condition: *mut celix_thread_cond_t,
                                         attr: *mut celix_thread_condattr_t)
         -> celix_status_t;
        pub fn celixThreadCondition_destroy(condition: *mut celix_thread_cond_t)
         -> celix_status_t;
        pub fn celixThreadCondition_wait(cond: *mut celix_thread_cond_t,
                                         mutex: *mut celix_thread_mutex_t)
         -> celix_status_t;
        pub fn celixThreadCondition_broadcast(cond: *mut celix_thread_cond_t)
         -> celix_status_t;
        pub fn celixThreadCondition_signal(cond: *mut celix_thread_cond_t)
         -> celix_status_t;
        pub fn celixThread_once(once_control: *mut celix_thread_once_t,
                                init_routine:
                                    ::std::option::Option<extern "C" fn()>)
         -> celix_status_t;
        pub fn arrayList_create(list: *mut array_list_pt) -> celix_status_t;
        pub fn arrayList_createWithEquals(equals: array_list_element_equals_pt,
                                          list: *mut array_list_pt)
         -> celix_status_t;
        pub fn arrayList_destroy(list: array_list_pt);
        pub fn arrayList_trimToSize(list: array_list_pt);
        pub fn arrayList_ensureCapacity(list: array_list_pt,
                                        capacity: ::std::os::raw::c_int);
        pub fn arrayList_size(list: array_list_pt) -> ::std::os::raw::c_uint;
        pub fn arrayList_isEmpty(list: array_list_pt) -> u8;
        pub fn arrayList_contains(list: array_list_pt,
                                  element: *mut ::std::os::raw::c_void) -> u8;
        pub fn arrayList_indexOf(list: array_list_pt,
                                 element: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn arrayList_lastIndexOf(list: array_list_pt,
                                     element: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn arrayList_get(list: array_list_pt, index: ::std::os::raw::c_uint)
         -> *mut ::std::os::raw::c_void;
        pub fn arrayList_set(list: array_list_pt, index: ::std::os::raw::c_uint,
                             element: *mut ::std::os::raw::c_void)
         -> *mut ::std::os::raw::c_void;
        pub fn arrayList_add(list: array_list_pt,
                             element: *mut ::std::os::raw::c_void) -> u8;
        pub fn arrayList_addIndex(list: array_list_pt,
                                  index: ::std::os::raw::c_uint,
                                  element: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn arrayList_addAll(list: array_list_pt, toAdd: array_list_pt) -> u8;
        pub fn arrayList_remove(list: array_list_pt,
                                index: ::std::os::raw::c_uint)
         -> *mut ::std::os::raw::c_void;
        pub fn arrayList_removeElement(list: array_list_pt,
                                       element: *mut ::std::os::raw::c_void)
         -> u8;
        pub fn arrayList_clear(list: array_list_pt);
        pub fn arrayList_clone(list: array_list_pt) -> array_list_pt;
        pub fn arrayListIterator_create(list: array_list_pt)
         -> array_list_iterator_pt;
        pub fn arrayListIterator_destroy(iterator: array_list_iterator_pt);
        pub fn arrayListIterator_hasNext(iterator: array_list_iterator_pt) -> u8;
        pub fn arrayListIterator_next(iterator: array_list_iterator_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn arrayListIterator_hasPrevious(iterator: array_list_iterator_pt)
         -> u8;
        pub fn arrayListIterator_previous(iterator: array_list_iterator_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn arrayListIterator_remove(iterator: array_list_iterator_pt);
        pub fn hashMap_create(keyHash:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)
                                                            ->
                                                                ::std::os::raw::c_uint>,
                              valueHash:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)
                                                            ->
                                                                ::std::os::raw::c_uint>,
                              keyEquals:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             arg2:
                                                                                 *mut ::std::os::raw::c_void)
                                                            ->
                                                                ::std::os::raw::c_int>,
                              valueEquals:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             arg2:
                                                                                 *mut ::std::os::raw::c_void)
                                                            ->
                                                                ::std::os::raw::c_int>)
         -> hash_map_pt;
        pub fn hashMap_destroy(map: hash_map_pt, freeKeys: u8, freeValues: u8);
        pub fn hashMap_size(map: hash_map_pt) -> ::std::os::raw::c_int;
        pub fn hashMap_isEmpty(map: hash_map_pt) -> u8;
        pub fn hashMap_get(map: hash_map_pt, key: *mut ::std::os::raw::c_void)
         -> *mut ::std::os::raw::c_void;
        pub fn hashMap_containsKey(map: hash_map_pt,
                                   key: *mut ::std::os::raw::c_void) -> u8;
        pub fn hashMap_getEntry(map: hash_map_pt,
                                key: *mut ::std::os::raw::c_void)
         -> hash_map_entry_pt;
        pub fn hashMap_put(map: hash_map_pt, key: *mut ::std::os::raw::c_void,
                           value: *mut ::std::os::raw::c_void)
         -> *mut ::std::os::raw::c_void;
        pub fn hashMap_remove(map: hash_map_pt, key: *mut ::std::os::raw::c_void)
         -> *mut ::std::os::raw::c_void;
        pub fn hashMap_clear(map: hash_map_pt, freeKey: u8, freeValue: u8);
        pub fn hashMap_containsValue(map: hash_map_pt,
                                     value: *mut ::std::os::raw::c_void) -> u8;
        pub fn hashMapIterator_create(map: hash_map_pt) -> hash_map_iterator_pt;
        pub fn hashMapIterator_destroy(iterator: hash_map_iterator_pt);
        pub fn hashMapIterator_hasNext(iterator: hash_map_iterator_pt) -> u8;
        pub fn hashMapIterator_remove(iterator: hash_map_iterator_pt);
        pub fn hashMapIterator_nextValue(iterator: hash_map_iterator_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn hashMapIterator_nextKey(iterator: hash_map_iterator_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn hashMapIterator_nextEntry(iterator: hash_map_iterator_pt)
         -> hash_map_entry_pt;
        pub fn hashMapKeySet_create(map: hash_map_pt) -> hash_map_key_set_pt;
        pub fn hashMapKeySet_destroy(keySet: hash_map_key_set_pt);
        pub fn hashMapKeySet_size(keySet: hash_map_key_set_pt)
         -> ::std::os::raw::c_int;
        pub fn hashMapKeySet_contains(keySet: hash_map_key_set_pt,
                                      key: *mut ::std::os::raw::c_void) -> u8;
        pub fn hashMapKeySet_remove(keySet: hash_map_key_set_pt,
                                    key: *mut ::std::os::raw::c_void) -> u8;
        pub fn hashMapKeySet_clear(keySet: hash_map_key_set_pt);
        pub fn hashMapKeySet_isEmpty(keySet: hash_map_key_set_pt) -> u8;
        pub fn hashMapValues_create(map: hash_map_pt) -> hash_map_values_pt;
        pub fn hashMapValues_destroy(values: hash_map_values_pt);
        pub fn hashMapValues_iterator(values: hash_map_values_pt)
         -> hash_map_iterator_pt;
        pub fn hashMapValues_size(values: hash_map_values_pt)
         -> ::std::os::raw::c_int;
        pub fn hashMapValues_contains(values: hash_map_values_pt,
                                      o: *mut ::std::os::raw::c_void) -> u8;
        pub fn hashMapValues_toArray(values: hash_map_values_pt,
                                     array: *mut *mut *mut ::std::os::raw::c_void,
                                     size: *mut ::std::os::raw::c_uint);
        pub fn hashMapValues_remove(values: hash_map_values_pt,
                                    o: *mut ::std::os::raw::c_void) -> u8;
        pub fn hashMapValues_clear(values: hash_map_values_pt);
        pub fn hashMapValues_isEmpty(values: hash_map_values_pt) -> u8;
        pub fn hashMapEntrySet_create(map: hash_map_pt) -> hash_map_entry_set_pt;
        pub fn hashMapEntrySet_destroy(entrySet: hash_map_entry_set_pt);
        pub fn hashMapEntrySet_size(entrySet: hash_map_entry_set_pt)
         -> ::std::os::raw::c_int;
        pub fn hashMapEntrySet_contains(entrySet: hash_map_entry_set_pt,
                                        entry: hash_map_entry_pt) -> u8;
        pub fn hashMapEntrySet_remove(entrySet: hash_map_entry_set_pt,
                                      entry: hash_map_entry_pt) -> u8;
        pub fn hashMapEntrySet_clear(entrySet: hash_map_entry_set_pt);
        pub fn hashMapEntrySet_isEmpty(entrySet: hash_map_entry_set_pt) -> u8;
        pub fn hashMapEntry_getKey(entry: hash_map_entry_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn hashMapEntry_getValue(entry: hash_map_entry_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn properties_create() -> properties_pt;
        pub fn properties_destroy(properties: properties_pt);
        pub fn properties_load(filename: *mut ::std::os::raw::c_char)
         -> properties_pt;
        pub fn properties_loadWithStream(stream: *mut FILE) -> properties_pt;
        pub fn properties_store(properties: properties_pt,
                                file: *mut ::std::os::raw::c_char,
                                header: *mut ::std::os::raw::c_char);
        pub fn properties_get(properties: properties_pt,
                              key: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
        pub fn properties_getWithDefault(properties: properties_pt,
                                         key: *mut ::std::os::raw::c_char,
                                         defaultValue:
                                             *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
        pub fn properties_set(properties: properties_pt,
                              key: *mut ::std::os::raw::c_char,
                              value: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
        pub fn properties_copy(properties: properties_pt,
                               copy: *mut properties_pt) -> celix_status_t;
        pub fn endpointDescription_create(properties: properties_pt,
                                          endpointDescription:
                                              *mut endpoint_description_pt)
         -> celix_status_t;
        pub fn endpointDescription_destroy(description: endpoint_description_pt)
         -> celix_status_t;
        pub fn filter_create(filterString: *mut ::std::os::raw::c_char)
         -> filter_pt;
        pub fn filter_destroy(filter: filter_pt);
        pub fn filter_match(filter: filter_pt, properties: properties_pt,
                            result: *mut u8) -> celix_status_t;
        pub fn filter_match_filter(src: filter_pt, dest: filter_pt,
                                   result: *mut u8) -> celix_status_t;
        pub fn filter_getString(filter: filter_pt,
                                filterStr: *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn manifest_create(manifest: *mut manifest_pt) -> celix_status_t;
        pub fn manifest_createFromFile(filename: *mut ::std::os::raw::c_char,
                                       manifest: *mut manifest_pt)
         -> celix_status_t;
        pub fn manifest_destroy(manifest: manifest_pt) -> celix_status_t;
        pub fn manifest_clear(manifest: manifest_pt);
        pub fn manifest_getMainAttributes(manifest: manifest_pt) -> properties_pt;
        pub fn manifest_getEntries(manifest: manifest_pt, map: *mut hash_map_pt)
         -> celix_status_t;
        pub fn manifest_read(manifest: manifest_pt,
                             filename: *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn manifest_write(manifest: manifest_pt,
                              filename: *mut ::std::os::raw::c_char);
        pub fn manifest_getValue(manifest: manifest_pt,
                                 name: *const ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
        pub fn frameworkLogger_log(level: framework_log_level_t,
                                   func: *const ::std::os::raw::c_char,
                                   file: *const ::std::os::raw::c_char,
                                   line: ::std::os::raw::c_int,
                                   fmsg: *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn framework_log(logger: framework_logger_pt,
                             level: framework_log_level_t,
                             func: *const ::std::os::raw::c_char,
                             file: *const ::std::os::raw::c_char,
                             line: ::std::os::raw::c_int,
                             fmsg: *mut ::std::os::raw::c_char, ...);
        pub fn framework_logCode(logger: framework_logger_pt,
                                 level: framework_log_level_t,
                                 func: *const ::std::os::raw::c_char,
                                 file: *const ::std::os::raw::c_char,
                                 line: ::std::os::raw::c_int,
                                 code: celix_status_t,
                                 fmsg: *mut ::std::os::raw::c_char, ...);
        pub fn bundleRevision_create(root: *mut ::std::os::raw::c_char,
                                     location: *mut ::std::os::raw::c_char,
                                     revisionNr: ::std::os::raw::c_long,
                                     inputFile: *mut ::std::os::raw::c_char,
                                     bundle_revision: *mut bundle_revision_pt)
         -> celix_status_t;
        pub fn bundleRevision_destroy(revision: bundle_revision_pt)
         -> celix_status_t;
        pub fn bundleRevision_getNumber(revision: bundle_revision_pt,
                                        revisionNr: *mut ::std::os::raw::c_long)
         -> celix_status_t;
        pub fn bundleRevision_getLocation(revision: bundle_revision_pt,
                                          location:
                                              *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundleRevision_getRoot(revision: bundle_revision_pt,
                                      root: *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundleRevision_getManifest(revision: bundle_revision_pt,
                                          manifest: *mut manifest_pt)
         -> celix_status_t;
        pub fn bundleRevision_getHandles(revision: bundle_revision_pt,
                                         handles: *mut array_list_pt)
         -> celix_status_t;
        pub fn bundleArchive_create(archiveRoot: *mut ::std::os::raw::c_char,
                                    id: ::std::os::raw::c_long,
                                    location: *mut ::std::os::raw::c_char,
                                    inputFile: *mut ::std::os::raw::c_char,
                                    bundle_archive: *mut bundle_archive_pt)
         -> celix_status_t;
        pub fn bundleArchive_createSystemBundleArchive(bundle_archive:
                                                           *mut bundle_archive_pt)
         -> celix_status_t;
        pub fn bundleArchive_recreate(archiveRoot: *mut ::std::os::raw::c_char,
                                      bundle_archive: *mut bundle_archive_pt)
         -> celix_status_t;
        pub fn bundleArchive_destroy(archive: bundle_archive_pt)
         -> celix_status_t;
        pub fn bundleArchive_getId(archive: bundle_archive_pt,
                                   id: *mut ::std::os::raw::c_long)
         -> celix_status_t;
        pub fn bundleArchive_getLocation(archive: bundle_archive_pt,
                                         location:
                                             *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundleArchive_getArchiveRoot(archive: bundle_archive_pt,
                                            archiveRoot:
                                                *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundleArchive_revise(archive: bundle_archive_pt,
                                    location: *mut ::std::os::raw::c_char,
                                    inputFile: *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundleArchive_rollbackRevise(archive: bundle_archive_pt,
                                            rolledback: *mut u8)
         -> celix_status_t;
        pub fn bundleArchive_getRevision(archive: bundle_archive_pt,
                                         revNr: ::std::os::raw::c_long,
                                         revision: *mut bundle_revision_pt)
         -> celix_status_t;
        pub fn bundleArchive_getCurrentRevision(archive: bundle_archive_pt,
                                                revision: *mut bundle_revision_pt)
         -> celix_status_t;
        pub fn bundleArchive_getCurrentRevisionNumber(archive: bundle_archive_pt,
                                                      revisionNumber:
                                                          *mut ::std::os::raw::c_long)
         -> celix_status_t;
        pub fn bundleArchive_getRefreshCount(archive: bundle_archive_pt,
                                             refreshCount:
                                                 *mut ::std::os::raw::c_long)
         -> celix_status_t;
        pub fn bundleArchive_setRefreshCount(archive: bundle_archive_pt)
         -> celix_status_t;
        pub fn bundleArchive_close(archive: bundle_archive_pt) -> celix_status_t;
        pub fn bundleArchive_closeAndDelete(archive: bundle_archive_pt)
         -> celix_status_t;
        pub fn bundleArchive_setLastModified(archive: bundle_archive_pt,
                                             lastModifiedTime: time_t)
         -> celix_status_t;
        pub fn bundleArchive_getLastModified(archive: bundle_archive_pt,
                                             lastModified: *mut time_t)
         -> celix_status_t;
        pub fn bundleArchive_setPersistentState(archive: bundle_archive_pt,
                                                state: bundle_state_e)
         -> celix_status_t;
        pub fn bundleArchive_getPersistentState(archive: bundle_archive_pt,
                                                state: *mut bundle_state_e)
         -> celix_status_t;
        pub fn framework_create(framework: *mut framework_pt,
                                config: properties_pt) -> celix_status_t;
        pub fn framework_destroy(framework: framework_pt) -> celix_status_t;
        pub fn fw_init(framework: framework_pt) -> celix_status_t;
        pub fn framework_waitForStop(framework: framework_pt) -> celix_status_t;
        pub fn framework_getFrameworkBundle(framework: framework_pt,
                                            bundle: *mut bundle_pt)
         -> celix_status_t;
        pub fn linkedList_create(list: *mut linked_list_pt) -> celix_status_t;
        pub fn linkedList_destroy(list: linked_list_pt) -> celix_status_t;
        pub fn linkedList_clone(list: linked_list_pt, clone: *mut linked_list_pt)
         -> celix_status_t;
        pub fn linkedList_getFirst(list: linked_list_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedList_getLast(list: linked_list_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedList_removeFirst(list: linked_list_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedList_removeLast(list: linked_list_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedList_addFirst(list: linked_list_pt,
                                   element: *mut ::std::os::raw::c_void);
        pub fn linkedList_addLast(list: linked_list_pt,
                                  element: *mut ::std::os::raw::c_void);
        pub fn linkedList_contains(list: linked_list_pt,
                                   element: *mut ::std::os::raw::c_void) -> u8;
        pub fn linkedList_size(list: linked_list_pt) -> ::std::os::raw::c_int;
        pub fn linkedList_isEmpty(list: linked_list_pt) -> u8;
        pub fn linkedList_addElement(list: linked_list_pt,
                                     element: *mut ::std::os::raw::c_void) -> u8;
        pub fn linkedList_removeElement(list: linked_list_pt,
                                        element: *mut ::std::os::raw::c_void)
         -> u8;
        pub fn linkedList_clear(list: linked_list_pt);
        pub fn linkedList_get(list: linked_list_pt, index: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedList_set(list: linked_list_pt, index: ::std::os::raw::c_int,
                              element: *mut ::std::os::raw::c_void)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedList_addIndex(list: linked_list_pt,
                                   index: ::std::os::raw::c_int,
                                   element: *mut ::std::os::raw::c_void);
        pub fn linkedList_removeIndex(list: linked_list_pt,
                                      index: ::std::os::raw::c_int)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedList_entry(list: linked_list_pt,
                                index: ::std::os::raw::c_int)
         -> linked_list_entry_pt;
        pub fn linkedList_indexOf(list: linked_list_pt,
                                  element: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn linkedList_addBefore(list: linked_list_pt,
                                    element: *mut ::std::os::raw::c_void,
                                    entry: linked_list_entry_pt)
         -> linked_list_entry_pt;
        pub fn linkedList_removeEntry(list: linked_list_pt,
                                      entry: linked_list_entry_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn version_createVersion(major: ::std::os::raw::c_int,
                                     minor: ::std::os::raw::c_int,
                                     micro: ::std::os::raw::c_int,
                                     qualifier: *mut ::std::os::raw::c_char,
                                     version: *mut version_pt) -> celix_status_t;
        pub fn version_destroy(version: version_pt) -> celix_status_t;
        pub fn version_clone(version: version_pt, clone: *mut version_pt)
         -> celix_status_t;
        pub fn version_createVersionFromString(versionStr:
                                                   *mut ::std::os::raw::c_char,
                                               version: *mut version_pt)
         -> celix_status_t;
        pub fn version_createEmptyVersion(version: *mut version_pt)
         -> celix_status_t;
        pub fn version_getMajor(version: version_pt,
                                major: *mut ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn version_getMinor(version: version_pt,
                                minor: *mut ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn version_getMicro(version: version_pt,
                                micro: *mut ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn version_getQualifier(version: version_pt,
                                    qualifier: *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn version_compareTo(version: version_pt, compare: version_pt,
                                 result: *mut ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn version_toString(version: version_pt,
                                string: *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn version_isCompatible(user: version_pt, provider: version_pt,
                                    isCompatible: *mut u8) -> celix_status_t;
        pub fn module_create(headerMap: manifest_pt,
                             moduleId: *mut ::std::os::raw::c_char,
                             bundle: bundle_pt) -> module_pt;
        pub fn module_createFrameworkModule(bundle: bundle_pt) -> module_pt;
        pub fn module_destroy(module: module_pt);
        pub fn module_hash(module: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_uint;
        pub fn module_equals(module: *mut ::std::os::raw::c_void,
                             compare: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn module_getWire(module: module_pt,
                              serviceName: *mut ::std::os::raw::c_char)
         -> wire_pt;
        pub fn module_getVersion(module: module_pt) -> version_pt;
        pub fn module_getSymbolicName(module: module_pt,
                                      symbolicName:
                                          *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn module_getId(module: module_pt) -> *mut ::std::os::raw::c_char;
        pub fn module_getWires(module: module_pt) -> linked_list_pt;
        pub fn module_setWires(module: module_pt, wires: linked_list_pt);
        pub fn module_isResolved(module: module_pt) -> u8;
        pub fn module_setResolved(module: module_pt);
        pub fn module_getBundle(module: module_pt) -> bundle_pt;
        pub fn module_getRequirements(module: module_pt) -> linked_list_pt;
        pub fn module_getCapabilities(module: module_pt) -> linked_list_pt;
        pub fn module_getDependentImporters(module: module_pt) -> array_list_pt;
        pub fn module_addDependentImporter(module: module_pt,
                                           importer: module_pt);
        pub fn module_removeDependentImporter(module: module_pt,
                                              importer: module_pt);
        pub fn module_getDependentRequirers(module: module_pt) -> array_list_pt;
        pub fn module_addDependentRequirer(module: module_pt,
                                           requirer: module_pt);
        pub fn module_removeDependentRequirer(module: module_pt,
                                              requirer: module_pt);
        pub fn module_getDependents(module: module_pt) -> array_list_pt;
        pub fn capability_create(module: module_pt, directives: hash_map_pt,
                                 attributes: hash_map_pt,
                                 capability: *mut capability_pt)
         -> celix_status_t;
        pub fn capability_destroy(capability: capability_pt) -> celix_status_t;
        pub fn capability_getServiceName(capability: capability_pt,
                                         serviceName:
                                             *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn capability_getVersion(capability: capability_pt,
                                     version: *mut version_pt) -> celix_status_t;
        pub fn capability_getModule(capability: capability_pt,
                                    module: *mut module_pt) -> celix_status_t;
        pub fn versionRange_createVersionRange(low: version_pt,
                                               isLowInclusive: u8,
                                               high: version_pt,
                                               isHighInclusive: u8,
                                               versionRange:
                                                   *mut version_range_pt)
         -> celix_status_t;
        pub fn versionRange_createInfiniteVersionRange(range:
                                                           *mut version_range_pt)
         -> celix_status_t;
        pub fn versionRange_destroy(range: version_range_pt) -> celix_status_t;
        pub fn versionRange_isInRange(versionRange: version_range_pt,
                                      version: version_pt, inRange: *mut u8)
         -> celix_status_t;
        pub fn versionRange_isLowInclusive(versionRange: version_range_pt,
                                           isLowInclusive: *mut u8)
         -> celix_status_t;
        pub fn versionRange_isHighInclusive(versionRange: version_range_pt,
                                            isHighInclusive: *mut u8)
         -> celix_status_t;
        pub fn versionRange_getLowVersion(versionRange: version_range_pt,
                                          lowVersion: *mut version_pt)
         -> celix_status_t;
        pub fn versionRange_getHighVersion(versionRange: version_range_pt,
                                           highVersion: *mut version_pt)
         -> celix_status_t;
        pub fn versionRange_parse(rangeStr: *mut ::std::os::raw::c_char,
                                  range: *mut version_range_pt) -> celix_status_t;
        pub fn requirement_create(directives: hash_map_pt,
                                  attributes: hash_map_pt,
                                  requirement: *mut requirement_pt)
         -> celix_status_t;
        pub fn requirement_destroy(requirement: requirement_pt) -> celix_status_t;
        pub fn requirement_getVersionRange(requirement: requirement_pt,
                                           range: *mut version_range_pt)
         -> celix_status_t;
        pub fn requirement_getTargetName(requirement: requirement_pt,
                                         targetName:
                                             *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn requirement_isSatisfied(requirement: requirement_pt,
                                       capability: capability_pt,
                                       inRange: *mut u8) -> celix_status_t;
        pub fn wire_create(importer: module_pt, requirement: requirement_pt,
                           exporter: module_pt, capability: capability_pt,
                           wire: *mut wire_pt) -> celix_status_t;
        pub fn wire_destroy(wire: wire_pt) -> celix_status_t;
        pub fn wire_getCapability(wire: wire_pt, capability: *mut capability_pt)
         -> celix_status_t;
        pub fn wire_getRequirement(wire: wire_pt,
                                   requirement: *mut requirement_pt)
         -> celix_status_t;
        pub fn wire_getImporter(wire: wire_pt, importer: *mut module_pt)
         -> celix_status_t;
        pub fn wire_getExporter(wire: wire_pt, exporter: *mut module_pt)
         -> celix_status_t;
        pub fn bundleContext_create(framework: framework_pt,
                                    arg1: framework_logger_pt, bundle: bundle_pt,
                                    bundle_context: *mut bundle_context_pt)
         -> celix_status_t;
        pub fn bundleContext_destroy(context: bundle_context_pt)
         -> celix_status_t;
        pub fn bundleContext_getBundle(context: bundle_context_pt,
                                       bundle: *mut bundle_pt) -> celix_status_t;
        pub fn bundleContext_getFramework(context: bundle_context_pt,
                                          framework: *mut framework_pt)
         -> celix_status_t;
        pub fn bundleContext_installBundle(context: bundle_context_pt,
                                           location: *mut ::std::os::raw::c_char,
                                           bundle: *mut bundle_pt)
         -> celix_status_t;
        pub fn bundleContext_installBundle2(context: bundle_context_pt,
                                            location: *mut ::std::os::raw::c_char,
                                            inputFile:
                                                *mut ::std::os::raw::c_char,
                                            bundle: *mut bundle_pt)
         -> celix_status_t;
        pub fn bundleContext_registerService(context: bundle_context_pt,
                                             serviceName:
                                                 *const ::std::os::raw::c_char,
                                             svcObj: *mut ::std::os::raw::c_void,
                                             properties: properties_pt,
                                             service_registration:
                                                 *mut service_registration_pt)
         -> celix_status_t;
        pub fn bundleContext_registerServiceFactory(context: bundle_context_pt,
                                                    serviceName:
                                                        *mut ::std::os::raw::c_char,
                                                    factory: service_factory_pt,
                                                    properties: properties_pt,
                                                    service_registration:
                                                        *mut service_registration_pt)
         -> celix_status_t;
        pub fn bundleContext_getServiceReference(context: bundle_context_pt,
                                                 serviceName:
                                                     *mut ::std::os::raw::c_char,
                                                 service_reference:
                                                     *mut service_reference_pt)
         -> celix_status_t;
        pub fn bundleContext_getServiceReferences(context: bundle_context_pt,
                                                  serviceName:
                                                      *const ::std::os::raw::c_char,
                                                  filter:
                                                      *mut ::std::os::raw::c_char,
                                                  service_references:
                                                      *mut array_list_pt)
         -> celix_status_t;
        pub fn bundleContext_retainServiceReference(context: bundle_context_pt,
                                                    reference:
                                                        service_reference_pt)
         -> celix_status_t;
        pub fn bundleContext_ungetServiceReference(context: bundle_context_pt,
                                                   reference:
                                                       service_reference_pt)
         -> celix_status_t;
        pub fn bundleContext_getService(context: bundle_context_pt,
                                        reference: service_reference_pt,
                                        service_instance:
                                            *mut *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn bundleContext_ungetService(context: bundle_context_pt,
                                          reference: service_reference_pt,
                                          result: *mut u8) -> celix_status_t;
        pub fn bundleContext_getBundles(context: bundle_context_pt,
                                        bundles: *mut array_list_pt)
         -> celix_status_t;
        pub fn bundleContext_getBundleById(context: bundle_context_pt,
                                           id: ::std::os::raw::c_long,
                                           bundle: *mut bundle_pt)
         -> celix_status_t;
        pub fn bundleContext_addServiceListener(context: bundle_context_pt,
                                                listener: service_listener_pt,
                                                filter:
                                                    *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundleContext_removeServiceListener(context: bundle_context_pt,
                                                   listener: service_listener_pt)
         -> celix_status_t;
        pub fn bundleContext_addBundleListener(context: bundle_context_pt,
                                               listener: bundle_listener_pt)
         -> celix_status_t;
        pub fn bundleContext_removeBundleListener(context: bundle_context_pt,
                                                  listener: bundle_listener_pt)
         -> celix_status_t;
        pub fn bundleContext_addFrameworkListener(context: bundle_context_pt,
                                                  listener: framework_listener_pt)
         -> celix_status_t;
        pub fn bundleContext_removeFrameworkListener(context: bundle_context_pt,
                                                     listener:
                                                         framework_listener_pt)
         -> celix_status_t;
        pub fn bundleContext_getProperty(context: bundle_context_pt,
                                         name: *const ::std::os::raw::c_char,
                                         value: *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundle_create(bundle: *mut bundle_pt) -> celix_status_t;
        pub fn bundle_createFromArchive(bundle: *mut bundle_pt,
                                        framework: framework_pt,
                                        archive: bundle_archive_pt)
         -> celix_status_t;
        pub fn bundle_destroy(bundle: bundle_pt) -> celix_status_t;
        pub fn bundle_isSystemBundle(bundle: bundle_pt, systemBundle: *mut u8)
         -> celix_status_t;
        pub fn bundle_getArchive(bundle: bundle_pt,
                                 archive: *mut bundle_archive_pt)
         -> celix_status_t;
        pub fn bundle_getCurrentModule(bundle: bundle_pt, module: *mut module_pt)
         -> celix_status_t;
        pub fn bundle_getModules(bundle: bundle_pt) -> array_list_pt;
        pub fn bundle_getHandle(bundle: bundle_pt) -> *mut ::std::os::raw::c_void;
        pub fn bundle_setHandle(bundle: bundle_pt,
                                handle: *mut ::std::os::raw::c_void);
        pub fn bundle_getActivator(bundle: bundle_pt) -> activator_pt;
        pub fn bundle_setActivator(bundle: bundle_pt, activator: activator_pt)
         -> celix_status_t;
        pub fn bundle_getContext(bundle: bundle_pt,
                                 context: *mut bundle_context_pt)
         -> celix_status_t;
        pub fn bundle_setContext(bundle: bundle_pt, context: bundle_context_pt)
         -> celix_status_t;
        pub fn bundle_getEntry(bundle: bundle_pt,
                               name: *mut ::std::os::raw::c_char,
                               entry: *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundle_start(bundle: bundle_pt) -> celix_status_t;
        pub fn bundle_startWithOptions(bundle: bundle_pt,
                                       options: ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn bundle_update(bundle: bundle_pt,
                             inputFile: *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundle_stop(bundle: bundle_pt) -> celix_status_t;
        pub fn bundle_stopWithOptions(bundle: bundle_pt,
                                      options: ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn bundle_uninstall(bundle: bundle_pt) -> celix_status_t;
        pub fn bundle_setState(bundle: bundle_pt, state: bundle_state_e)
         -> celix_status_t;
        pub fn bundle_setPersistentStateInactive(bundle: bundle_pt)
         -> celix_status_t;
        pub fn bundle_setPersistentStateUninstalled(bundle: bundle_pt)
         -> celix_status_t;
        pub fn uninstallBundle(bundle: bundle_pt);
        pub fn bundle_revise(bundle: bundle_pt,
                             location: *mut ::std::os::raw::c_char,
                             inputFile: *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundle_addModule(bundle: bundle_pt, module: module_pt)
         -> celix_status_t;
        pub fn bundle_closeModules(bundle: bundle_pt) -> celix_status_t;
        pub fn getUsingBundles(reference: service_reference_pt) -> array_list_pt;
        pub fn compareTo(a: service_reference_pt, b: service_reference_pt)
         -> ::std::os::raw::c_int;
        pub fn bundle_getState(bundle: bundle_pt, state: *mut bundle_state_e)
         -> celix_status_t;
        pub fn bundle_isLockable(bundle: bundle_pt, lockable: *mut u8)
         -> celix_status_t;
        pub fn bundle_getLockingThread(bundle: bundle_pt,
                                       thread: *mut celix_thread_t)
         -> celix_status_t;
        pub fn bundle_lock(bundle: bundle_pt, locked: *mut u8) -> celix_status_t;
        pub fn bundle_unlock(bundle: bundle_pt, unlocked: *mut u8)
         -> celix_status_t;
        pub fn bundle_closeAndDelete(bundle: bundle_pt) -> celix_status_t;
        pub fn bundle_close(bundle: bundle_pt) -> celix_status_t;
        pub fn bundle_refresh(bundle: bundle_pt) -> celix_status_t;
        pub fn bundle_getBundleId(bundle: bundle_pt,
                                  id: *mut ::std::os::raw::c_long)
         -> celix_status_t;
        pub fn bundle_getRegisteredServices(bundle: bundle_pt,
                                            list: *mut array_list_pt)
         -> celix_status_t;
        pub fn bundle_getServicesInUse(bundle: bundle_pt,
                                       list: *mut array_list_pt)
         -> celix_status_t;
        pub fn bundle_setFramework(bundle: bundle_pt, framework: framework_pt)
         -> celix_status_t;
        pub fn bundle_getFramework(bundle: bundle_pt,
                                   framework: *mut framework_pt)
         -> celix_status_t;
        pub fn bundle_getBundleLocation(bundle: bundle_pt,
                                        location:
                                            *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn serviceRegistry_create(framework: framework_pt,
                                      serviceChanged: serviceChanged_function_pt,
                                      registry: *mut service_registry_pt)
         -> celix_status_t;
        pub fn serviceRegistry_destroy(registry: service_registry_pt)
         -> celix_status_t;
        pub fn serviceRegistry_getRegisteredServices(registry:
                                                         service_registry_pt,
                                                     bundle: bundle_pt,
                                                     services: *mut array_list_pt)
         -> celix_status_t;
        pub fn serviceRegistry_getServicesInUse(registry: service_registry_pt,
                                                bundle: bundle_pt,
                                                services: *mut array_list_pt)
         -> celix_status_t;
        pub fn serviceRegistry_registerService(registry: service_registry_pt,
                                               bundle: bundle_pt,
                                               serviceName:
                                                   *mut ::std::os::raw::c_char,
                                               serviceObject:
                                                   *mut ::std::os::raw::c_void,
                                               dictionary: properties_pt,
                                               registration:
                                                   *mut service_registration_pt)
         -> celix_status_t;
        pub fn serviceRegistry_registerServiceFactory(registry:
                                                          service_registry_pt,
                                                      bundle: bundle_pt,
                                                      serviceName:
                                                          *mut ::std::os::raw::c_char,
                                                      factory: service_factory_pt,
                                                      dictionary: properties_pt,
                                                      registration:
                                                          *mut service_registration_pt)
         -> celix_status_t;
        pub fn serviceRegistry_unregisterService(registry: service_registry_pt,
                                                 bundle: bundle_pt,
                                                 registration:
                                                     service_registration_pt)
         -> celix_status_t;
        pub fn serviceRegistry_clearServiceRegistrations(registry:
                                                             service_registry_pt,
                                                         bundle: bundle_pt)
         -> celix_status_t;
        pub fn serviceRegistry_getServiceReference(registry: service_registry_pt,
                                                   bundle: bundle_pt,
                                                   registration:
                                                       service_registration_pt,
                                                   reference:
                                                       *mut service_reference_pt)
         -> celix_status_t;
        pub fn serviceRegistry_getServiceReferences(registry: service_registry_pt,
                                                    bundle: bundle_pt,
                                                    serviceName:
                                                        *const ::std::os::raw::c_char,
                                                    filter: filter_pt,
                                                    references:
                                                        *mut array_list_pt)
         -> celix_status_t;
        pub fn serviceRegistry_retainServiceReference(registry:
                                                          service_registry_pt,
                                                      bundle: bundle_pt,
                                                      reference:
                                                          service_reference_pt)
         -> celix_status_t;
        pub fn serviceRegistry_ungetServiceReference(registry:
                                                         service_registry_pt,
                                                     bundle: bundle_pt,
                                                     reference:
                                                         service_reference_pt)
         -> celix_status_t;
        pub fn serviceRegistry_getService(registry: service_registry_pt,
                                          bundle: bundle_pt,
                                          reference: service_reference_pt,
                                          service:
                                              *mut *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn serviceRegistry_ungetService(registry: service_registry_pt,
                                            bundle: bundle_pt,
                                            reference: service_reference_pt,
                                            result: *mut u8) -> celix_status_t;
        pub fn serviceRegistry_clearReferencesFor(registry: service_registry_pt,
                                                  bundle: bundle_pt)
         -> celix_status_t;
        pub fn serviceRegistry_getListenerHooks(registry: service_registry_pt,
                                                bundle: bundle_pt,
                                                hooks: *mut array_list_pt)
         -> celix_status_t;
        pub fn serviceRegistry_servicePropertiesModified(registry:
                                                             service_registry_pt,
                                                         registration:
                                                             service_registration_pt,
                                                         oldprops: properties_pt)
         -> celix_status_t;
        pub fn serviceRegistration_unregister(registration:
                                                  service_registration_pt)
         -> celix_status_t;
        pub fn serviceRegistration_getProperties(registration:
                                                     service_registration_pt,
                                                 properties: *mut properties_pt)
         -> celix_status_t;
        pub fn serviceRegistration_setProperties(registration:
                                                     service_registration_pt,
                                                 properties: properties_pt)
         -> celix_status_t;
        pub fn serviceRegistration_getServiceName(registration:
                                                      service_registration_pt,
                                                  serviceName:
                                                      *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn serviceReference_getBundle(reference: service_reference_pt,
                                          bundle: *mut bundle_pt)
         -> celix_status_t;
        pub fn serviceReference_isAssignableTo(reference: service_reference_pt,
                                               requester: bundle_pt,
                                               serviceName:
                                                   *mut ::std::os::raw::c_char)
         -> u8;
        pub fn serviceReference_getProperty(reference: service_reference_pt,
                                            key: *mut ::std::os::raw::c_char,
                                            value:
                                                *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn serviceReference_getPropertyKeys(reference: service_reference_pt,
                                                keys:
                                                    *mut *mut *mut ::std::os::raw::c_char,
                                                size: *mut ::std::os::raw::c_uint)
         -> celix_status_t;
        pub fn serviceReference_getServiceRegistration(reference:
                                                           service_reference_pt,
                                                       registration:
                                                           *mut service_registration_pt)
         -> celix_status_t;
        pub fn serviceReference_equals(reference: service_reference_pt,
                                       compareTo: service_reference_pt,
                                       equal: *mut u8) -> celix_status_t;
        pub fn serviceReference_hashCode(referenceP: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_uint;
        pub fn serviceReference_equals2(reference1: *mut ::std::os::raw::c_void,
                                        reference2: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn serviceReference_compareTo(reference: service_reference_pt,
                                          compareTo: service_reference_pt,
                                          compare: *mut ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn serviceReference_getUsingBundles(_ref: service_reference_pt,
                                                out: *mut array_list_pt)
         -> celix_status_t;
        pub fn exportRegistration_close(registration: export_registration_pt)
         -> celix_status_t;
        pub fn exportRegistration_getException(registration:
                                                   export_registration_pt)
         -> celix_status_t;
        pub fn exportRegistration_getExportReference(registration:
                                                         export_registration_pt,
                                                     reference:
                                                         *mut export_reference_pt)
         -> celix_status_t;
        pub fn exportReference_getExportedEndpoint(reference: export_reference_pt,
                                                   endpoint:
                                                       *mut endpoint_description_pt)
         -> celix_status_t;
        pub fn exportReference_getExportedService(reference: export_reference_pt,
                                                  service:
                                                      *mut service_reference_pt)
         -> celix_status_t;
        pub fn importRegistration_close(registration: import_registration_pt)
         -> celix_status_t;
        pub fn importRegistration_getException(registration:
                                                   import_registration_pt)
         -> celix_status_t;
        pub fn importRegistration_getImportReference(registration:
                                                         import_registration_pt,
                                                     reference:
                                                         *mut import_reference_pt)
         -> celix_status_t;
        pub fn importReference_getImportedEndpoint(reference: import_reference_pt)
         -> celix_status_t;
        pub fn importReference_getImportedService(reference: import_reference_pt)
         -> celix_status_t;
        pub fn remoteProxyFactory_create(context: bundle_context_pt,
                                         service: *mut ::std::os::raw::c_char,
                                         handle: *mut ::std::os::raw::c_void,
                                         create: createProxyService,
                                         destroy: destroyProxyService,
                                         remote_proxy_factory_ptr:
                                             *mut remote_proxy_factory_pt)
         -> celix_status_t;
        pub fn remoteProxyFactory_destroy(remote_proxy_factory_ptr:
                                              *mut remote_proxy_factory_pt)
         -> celix_status_t;
        pub fn remoteProxyFactory_register(remote_proxy_factory_ptr:
                                               remote_proxy_factory_pt)
         -> celix_status_t;
        pub fn remoteProxyFactory_unregister(remote_proxy_factory_ptr:
                                                 remote_proxy_factory_pt)
         -> celix_status_t;
        pub fn logEntry_create(bundleId: ::std::os::raw::c_long,
                               bundleSymbolicName: *mut ::std::os::raw::c_char,
                               reference: service_reference_pt,
                               level: log_level_t,
                               message: *mut ::std::os::raw::c_char,
                               errorCode: ::std::os::raw::c_int,
                               entry: *mut log_entry_pt) -> celix_status_t;
        pub fn logEntry_destroy(entry: *mut log_entry_pt) -> celix_status_t;
        pub fn logEntry_getBundleSymbolicName(entry: log_entry_pt,
                                              bundleSymbolicName:
                                                  *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn logEntry_getBundleId(entry: log_entry_pt,
                                    bundleId: *mut ::std::os::raw::c_long)
         -> celix_status_t;
        pub fn logEntry_getErrorCode(entry: log_entry_pt,
                                     errorCode: *mut ::std::os::raw::c_int)
         -> celix_status_t;
        pub fn logEntry_getLevel(entry: log_entry_pt, level: *mut log_level_t)
         -> celix_status_t;
        pub fn logEntry_getMessage(entry: log_entry_pt,
                                   message: *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn logEntry_getTime(entry: log_entry_pt, time: *mut time_t)
         -> celix_status_t;
        pub fn logListener_logged(listener: log_listener_pt, entry: log_entry_pt)
         -> celix_status_t;
        pub fn logHelper_create(context: bundle_context_pt,
                                log_helper: *mut log_helper_pt) -> celix_status_t;
        pub fn logHelper_start(loghelper: log_helper_pt) -> celix_status_t;
        pub fn logHelper_stop(loghelper: log_helper_pt) -> celix_status_t;
        pub fn logHelper_destroy(loghelper: *mut log_helper_pt) -> celix_status_t;
        pub fn logHelper_log(loghelper: log_helper_pt, level: log_level_t,
                             message: *mut ::std::os::raw::c_char, ...)
         -> celix_status_t;
        pub fn serviceDependency_create(dependency_ptr:
                                            *mut dm_service_dependency_pt)
         -> celix_status_t;
        pub fn serviceDependency_destroy(dependency_ptr:
                                             *mut dm_service_dependency_pt)
         -> celix_status_t;
        pub fn serviceDependency_setRequired(dependency: dm_service_dependency_pt,
                                             required: u8) -> celix_status_t;
        pub fn serviceDependency_setStrategy(dependency: dm_service_dependency_pt,
                                             strategy:
                                                 dm_service_dependency_strategy_t)
         -> celix_status_t;
        pub fn serviceDependency_getStrategy(dependency: dm_service_dependency_pt,
                                             strategy:
                                                 *mut dm_service_dependency_strategy_t)
         -> celix_status_t;
        pub fn serviceDependency_setService(dependency: dm_service_dependency_pt,
                                            serviceName:
                                                *mut ::std::os::raw::c_char,
                                            serviceVersion:
                                                *mut ::std::os::raw::c_char,
                                            filter: *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn serviceDependency_getFilter(dependency: dm_service_dependency_pt,
                                           filter:
                                               *mut *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn serviceDependency_setCallbacks(dependency:
                                                  dm_service_dependency_pt,
                                              set: service_set_fpt,
                                              add: service_add_fpt,
                                              change: service_change_fpt,
                                              remove: service_remove_fpt,
                                              swap: service_swap_fpt)
         -> celix_status_t;
        pub fn serviceDependency_setCallbacksWithServiceReference(dependency:
                                                                      dm_service_dependency_pt,
                                                                  set:
                                                                      service_set_with_ref_fpt,
                                                                  add:
                                                                      service_add_with_ref_fpt,
                                                                  change:
                                                                      service_change_with_ref_fpt,
                                                                  remove:
                                                                      service_remove_with_ref_fpt,
                                                                  swap:
                                                                      service_swap_with_ref_fpt)
         -> celix_status_t;
        pub fn serviceDependency_setAutoConfigure(dependency:
                                                      dm_service_dependency_pt,
                                                  service_lock:
                                                      *mut celix_thread_mutex_t,
                                                  field:
                                                      *mut *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn serviceDependency_getServiceDependencyInfo(arg1:
                                                              dm_service_dependency_pt,
                                                          info:
                                                              *mut dm_service_dependency_info_pt)
         -> celix_status_t;
        pub fn dependency_destroyDependencyInfo(info:
                                                    dm_service_dependency_info_pt);
        pub fn component_create(context: bundle_context_pt,
                                name: *const ::std::os::raw::c_char,
                                component: *mut dm_component_pt)
         -> celix_status_t;
        pub fn component_destroy(component: dm_component_pt);
        pub fn component_addInterface(component: dm_component_pt,
                                      serviceName: *mut ::std::os::raw::c_char,
                                      serviceVersion: *mut ::std::os::raw::c_char,
                                      service: *mut ::std::os::raw::c_void,
                                      properties: properties_pt)
         -> celix_status_t;
        pub fn component_setImplementation(component: dm_component_pt,
                                           implementation:
                                               *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn component_getInterfaces(component: dm_component_pt,
                                       servicesNames: *mut array_list_pt)
         -> celix_status_t;
        pub fn component_addServiceDependency(component: dm_component_pt,
                                              dep: dm_service_dependency_pt)
         -> celix_status_t;
        pub fn component_removeServiceDependency(component: dm_component_pt,
                                                 dependency:
                                                     dm_service_dependency_pt)
         -> celix_status_t;
        pub fn component_currentState(cmp: dm_component_pt)
         -> dm_component_state_t;
        pub fn component_getImplementation(cmp: dm_component_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn component_getName(cmp: dm_component_pt)
         -> *const ::std::os::raw::c_char;
        pub fn component_setCallbacks(component: dm_component_pt, init: init_fpt,
                                      start: start_fpt, stop: stop_fpt,
                                      deinit: deinit_fpt) -> celix_status_t;
        pub fn component_getComponentInfo(component: dm_component_pt,
                                          info: *mut dm_component_info_pt)
         -> celix_status_t;
        pub fn component_destroyComponentInfo(info: dm_component_info_pt);
        pub fn dependencyManager_create(context: bundle_context_pt,
                                        manager: *mut dm_dependency_manager_pt)
         -> celix_status_t;
        pub fn dependencyManager_destroy(manager: dm_dependency_manager_pt);
        pub fn dependencyManager_add(manager: dm_dependency_manager_pt,
                                     component: dm_component_pt)
         -> celix_status_t;
        pub fn dependencyManager_removeAllComponents(manager:
                                                         dm_dependency_manager_pt)
         -> celix_status_t;
        pub fn dependencyManager_getInfo(manager: dm_dependency_manager_pt,
                                         info: *mut dm_dependency_manager_info_pt)
         -> celix_status_t;
        pub fn dependencyManager_destroyInfo(manager: dm_dependency_manager_pt,
                                             info: dm_dependency_manager_info_pt);
        pub fn dm_create(context: bundle_context_pt,
                         userData: *mut *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn dm_init(userData: *mut ::std::os::raw::c_void,
                       context: bundle_context_pt,
                       manager: dm_dependency_manager_pt) -> celix_status_t;
        pub fn dm_destroy(userData: *mut ::std::os::raw::c_void,
                          context: bundle_context_pt,
                          manager: dm_dependency_manager_pt) -> celix_status_t;
        pub fn extractBundle(bundleName: *mut ::std::os::raw::c_char,
                             revisionRoot: *mut ::std::os::raw::c_char)
         -> celix_status_t;
        pub fn bundleActivator_create(context_ptr: bundle_context_pt,
                                      userData: *mut *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn bundleActivator_start(userData: *mut ::std::os::raw::c_void,
                                     context: bundle_context_pt)
         -> celix_status_t;
        pub fn bundleActivator_stop(userData: *mut ::std::os::raw::c_void,
                                    context: bundle_context_pt) -> celix_status_t;
        pub fn bundleActivator_destroy(userData: *mut ::std::os::raw::c_void,
                                       context: bundle_context_pt)
         -> celix_status_t;
        pub fn serviceTrackerCustomizer_create(handle:
                                                   *mut ::std::os::raw::c_void,
                                               addingFunction: adding_callback_pt,
                                               addedFunction: added_callback_pt,
                                               modifiedFunction:
                                                   modified_callback_pt,
                                               removedFunction:
                                                   removed_callback_pt,
                                               customizer:
                                                   *mut service_tracker_customizer_pt)
         -> celix_status_t;
        pub fn serviceTrackerCustomizer_destroy(customizer:
                                                    service_tracker_customizer_pt)
         -> celix_status_t;
        pub fn serviceTrackerCustomizer_getHandle(customizer:
                                                      service_tracker_customizer_pt,
                                                  handle:
                                                      *mut *mut ::std::os::raw::c_void)
         -> celix_status_t;
        pub fn serviceTrackerCustomizer_getAddingFunction(customizer:
                                                              service_tracker_customizer_pt,
                                                          function:
                                                              *mut adding_callback_pt)
         -> celix_status_t;
        pub fn serviceTrackerCustomizer_getAddedFunction(customizer:
                                                             service_tracker_customizer_pt,
                                                         function:
                                                             *mut added_callback_pt)
         -> celix_status_t;
        pub fn serviceTrackerCustomizer_getModifiedFunction(customizer:
                                                                service_tracker_customizer_pt,
                                                            function:
                                                                *mut modified_callback_pt)
         -> celix_status_t;
        pub fn serviceTrackerCustomizer_getRemovedFunction(customizer:
                                                               service_tracker_customizer_pt,
                                                           function:
                                                               *mut removed_callback_pt)
         -> celix_status_t;
        pub fn serviceTracker_create(context: bundle_context_pt,
                                     service: *mut ::std::os::raw::c_char,
                                     customizer: service_tracker_customizer_pt,
                                     tracker: *mut service_tracker_pt)
         -> celix_status_t;
        pub fn serviceTracker_createWithFilter(context: bundle_context_pt,
                                               filter:
                                                   *mut ::std::os::raw::c_char,
                                               customizer:
                                                   service_tracker_customizer_pt,
                                               tracker: *mut service_tracker_pt)
         -> celix_status_t;
        pub fn serviceTracker_open(tracker: service_tracker_pt) -> celix_status_t;
        pub fn serviceTracker_close(tracker: service_tracker_pt)
         -> celix_status_t;
        pub fn serviceTracker_destroy(tracker: service_tracker_pt)
         -> celix_status_t;
        pub fn serviceTracker_getServiceReference(tracker: service_tracker_pt)
         -> service_reference_pt;
        pub fn serviceTracker_getServiceReferences(tracker: service_tracker_pt)
         -> array_list_pt;
        pub fn serviceTracker_getService(tracker: service_tracker_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn serviceTracker_getServices(tracker: service_tracker_pt)
         -> array_list_pt;
        pub fn serviceTracker_getServiceByReference(tracker: service_tracker_pt,
                                                    reference:
                                                        service_reference_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn serviceTracker_serviceChanged(listener: service_listener_pt,
                                             event: service_event_pt);
        pub fn celixLauncher_launch(configFile: *const ::std::os::raw::c_char,
                                    framework: *mut framework_pt)
         -> ::std::os::raw::c_int;
        pub fn celixLauncher_launchWithStream(config: *mut FILE,
                                              framework: *mut framework_pt)
         -> ::std::os::raw::c_int;
        pub fn celixLauncher_launchWithProperties(config: properties_pt,
                                                  framework: *mut framework_pt)
         -> ::std::os::raw::c_int;
        pub fn celixLauncher_stop(framework: framework_pt);
        pub fn celixLauncher_destroy(framework: framework_pt);
        pub fn celixLauncher_waitForShutdown(framework: framework_pt);
        pub fn utils_stringHash(string: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_uint;
        pub fn utils_stringEquals(string: *mut ::std::os::raw::c_void,
                                  toCompare: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn string_ndup(s: *const ::std::os::raw::c_char, n: size_t)
         -> *mut ::std::os::raw::c_char;
        pub fn utils_stringTrim(string: *mut ::std::os::raw::c_char)
         -> *mut ::std::os::raw::c_char;
        pub fn utils_isStringEmptyOrNull(str: *const ::std::os::raw::c_char)
         -> u8;
        pub fn utils_compareServiceIdsAndRanking(servId: ::std::os::raw::c_long,
                                                 servRank: ::std::os::raw::c_long,
                                                 otherServId:
                                                     ::std::os::raw::c_long,
                                                 otherServRank:
                                                     ::std::os::raw::c_long)
         -> ::std::os::raw::c_int;
        pub fn thread_equalsSelf(thread: celix_thread_t, equals: *mut u8)
         -> celix_status_t;
        pub fn utils_isNumeric(number: *mut ::std::os::raw::c_char, ret: *mut u8)
         -> celix_status_t;
        pub fn linkedListIterator_create(list: linked_list_pt,
                                         index: ::std::os::raw::c_uint)
         -> linked_list_iterator_pt;
        pub fn linkedListIterator_destroy(iterator: linked_list_iterator_pt);
        pub fn linkedListIterator_hasNext(iterator: linked_list_iterator_pt)
         -> u8;
        pub fn linkedListIterator_next(iterator: linked_list_iterator_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedListIterator_hasPrevious(iterator: linked_list_iterator_pt)
         -> u8;
        pub fn linkedListIterator_previous(iterator: linked_list_iterator_pt)
         -> *mut ::std::os::raw::c_void;
        pub fn linkedListIterator_nextIndex(iterator: linked_list_iterator_pt)
         -> ::std::os::raw::c_int;
        pub fn linkedListIterator_previousIndex(iterator: linked_list_iterator_pt)
         -> ::std::os::raw::c_int;
        pub fn linkedListIterator_remove(iterator: linked_list_iterator_pt);
        pub fn linkedListIterator_set(iterator: linked_list_iterator_pt,
                                      element: *mut ::std::os::raw::c_void);
        pub fn linkedListIterator_add(iterator: linked_list_iterator_pt,
                                      element: *mut ::std::os::raw::c_void);
        pub fn thpool_init(num_threads: ::std::os::raw::c_int) -> threadpool;
        pub fn thpool_add_work(arg1: threadpool,
                               function_p:
                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut ::std::os::raw::c_void)
                                                             ->
                                                                 *mut ::std::os::raw::c_void>,
                               arg_p: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn thpool_wait(arg1: threadpool);
        pub fn thpool_pause(arg1: threadpool);
        pub fn thpool_resume(arg1: threadpool);
        pub fn thpool_destroy(arg1: threadpool);
        pub fn dynCommon_logSetup(logf: logf_ft,
                                  handle: *mut ::std::os::raw::c_void,
                                  currentLogLevel: ::std::os::raw::c_int);
        pub fn dynCommon_parseName(stream: *mut FILE,
                                   result: *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynCommon_parseNameAlsoAccept(stream: *mut FILE,
                                             acceptedChars:
                                                 *const ::std::os::raw::c_char,
                                             result:
                                                 *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynCommon_parseNameValue(stream: *mut FILE,
                                        name: *mut *mut ::std::os::raw::c_char,
                                        value: *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynCommon_eatChar(stream: *mut FILE, c: ::std::os::raw::c_int)
         -> ::std::os::raw::c_int;
        pub fn dynCommon_clearNamValHead(head: *mut Struct_namvals_head);
        pub fn dynType_logSetup(logf: logf_ft,
                                handle: *mut ::std::os::raw::c_void,
                                currentLogLevel: ::std::os::raw::c_int);
        pub fn dynType_parse(descriptorStream: *mut FILE,
                             name: *const ::std::os::raw::c_char,
                             refTypes: *mut Struct_types_head,
                             _type: *mut *mut dyn_type) -> ::std::os::raw::c_int;
        pub fn dynType_parseWithStr(descriptor: *const ::std::os::raw::c_char,
                                    name: *const ::std::os::raw::c_char,
                                    refTypes: *mut Struct_types_head,
                                    _type: *mut *mut dyn_type)
         -> ::std::os::raw::c_int;
        pub fn dynType_destroy(_type: *mut dyn_type);
        pub fn dynType_alloc(_type: *mut dyn_type,
                             bufLoc: *mut *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn dynType_free(_type: *mut dyn_type,
                            loc: *mut ::std::os::raw::c_void);
        pub fn dynType_print(_type: *mut dyn_type, stream: *mut FILE);
        pub fn dynType_size(_type: *mut dyn_type) -> size_t;
        pub fn dynType_type(_type: *mut dyn_type) -> ::std::os::raw::c_int;
        pub fn dynType_descriptorType(_type: *mut dyn_type)
         -> ::std::os::raw::c_int;
        pub fn dynType_getMetaInfo(_type: *mut dyn_type,
                                   name: *const ::std::os::raw::c_char)
         -> *const ::std::os::raw::c_char;
        pub fn dynType_complex_indexForName(_type: *mut dyn_type,
                                            name: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynType_complex_dynTypeAt(_type: *mut dyn_type,
                                         index: ::std::os::raw::c_int,
                                         subType: *mut *mut dyn_type)
         -> ::std::os::raw::c_int;
        pub fn dynType_complex_setValueAt(_type: *mut dyn_type,
                                          index: ::std::os::raw::c_int,
                                          inst: *mut ::std::os::raw::c_void,
                                          _in: *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn dynType_complex_valLocAt(_type: *mut dyn_type,
                                        index: ::std::os::raw::c_int,
                                        inst: *mut ::std::os::raw::c_void,
                                        valLoc: *mut *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn dynType_complex_entries(_type: *mut dyn_type,
                                       entries:
                                           *mut *mut Struct_complex_type_entries_head)
         -> ::std::os::raw::c_int;
        pub fn dynType_sequence_alloc(_type: *mut dyn_type,
                                      inst: *mut ::std::os::raw::c_void,
                                      cap: uint32_t) -> ::std::os::raw::c_int;
        pub fn dynType_sequence_locForIndex(_type: *mut dyn_type,
                                            seqLoc: *mut ::std::os::raw::c_void,
                                            index: ::std::os::raw::c_int,
                                            valLoc:
                                                *mut *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn dynType_sequence_increaseLengthAndReturnLastLoc(_type:
                                                                   *mut dyn_type,
                                                               seqLoc:
                                                                   *mut ::std::os::raw::c_void,
                                                               valLoc:
                                                                   *mut *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn dynType_sequence_itemType(_type: *mut dyn_type) -> *mut dyn_type;
        pub fn dynType_sequence_length(seqLoc: *mut ::std::os::raw::c_void)
         -> uint32_t;
        pub fn dynType_typedPointer_getTypedType(_type: *mut dyn_type,
                                                 typedType: *mut *mut dyn_type)
         -> ::std::os::raw::c_int;
        pub fn dynType_text_allocAndInit(_type: *mut dyn_type,
                                         textLoc: *mut ::std::os::raw::c_void,
                                         value: *const ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynType_simple_setValue(_type: *mut dyn_type,
                                       inst: *mut ::std::os::raw::c_void,
                                       _in: *mut ::std::os::raw::c_void);
        pub fn dynFunction_logSetup(logf: logf_ft,
                                    handle: *mut ::std::os::raw::c_void,
                                    currentLogLevel: ::std::os::raw::c_int);
        pub fn dynFunction_parse(descriptorStream: *mut FILE,
                                 refTypes: *mut Struct_types_head,
                                 dynFunc: *mut *mut dyn_function_type)
         -> ::std::os::raw::c_int;
        pub fn dynFunction_parseWithStr(descriptor: *const ::std::os::raw::c_char,
                                        refTypes: *mut Struct_types_head,
                                        dynFunc: *mut *mut dyn_function_type)
         -> ::std::os::raw::c_int;
        pub fn dynFunction_nrOfArguments(dynFunc: *mut dyn_function_type)
         -> ::std::os::raw::c_int;
        pub fn dynFunction_argumentTypeForIndex(dynFunc: *mut dyn_function_type,
                                                argumentNr: ::std::os::raw::c_int)
         -> *mut dyn_type;
        pub fn dynFunction_argumentMetaForIndex(dynFunc: *mut dyn_function_type,
                                                argumentNr: ::std::os::raw::c_int)
         -> Enum_dyn_function_argument_meta;
        pub fn dynFunction_returnType(dynFunction: *mut dyn_function_type)
         -> *mut dyn_type;
        pub fn dynFunction_destroy(dynFunc: *mut dyn_function_type);
        pub fn dynFunction_call(dynFunc: *mut dyn_function_type,
                                _fn: ::std::option::Option<extern "C" fn()>,
                                returnValue: *mut ::std::os::raw::c_void,
                                argValues: *mut *mut ::std::os::raw::c_void)
         -> ::std::os::raw::c_int;
        pub fn dynFunction_createClosure(func: *mut dyn_function_type,
                                         bind:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut ::std::os::raw::c_void,
                                                                                        arg2:
                                                                                            *mut *mut ::std::os::raw::c_void,
                                                                                        arg3:
                                                                                            *mut ::std::os::raw::c_void)>,
                                         userData: *mut ::std::os::raw::c_void,
                                         _fn:
                                             *mut ::std::option::Option<extern "C" fn()>)
         -> ::std::os::raw::c_int;
        pub fn dynFunction_getFnPointer(func: *mut dyn_function_type,
                                        _fn:
                                            *mut ::std::option::Option<extern "C" fn()>)
         -> ::std::os::raw::c_int;
        pub fn dynInterface_logSetup(logf: logf_ft,
                                     handle: *mut ::std::os::raw::c_void,
                                     currentLogLevel: ::std::os::raw::c_int);
        pub fn dynInterface_parse(descriptor: *mut FILE,
                                  out: *mut *mut dyn_interface_type)
         -> ::std::os::raw::c_int;
        pub fn dynInterface_destroy(intf: *mut dyn_interface_type);
        pub fn dynInterface_getName(intf: *mut dyn_interface_type,
                                    name: *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynInterface_getVersion(intf: *mut dyn_interface_type,
                                       version: *mut version_pt)
         -> ::std::os::raw::c_int;
        pub fn dynInterface_getVersionString(intf: *mut dyn_interface_type,
                                             version:
                                                 *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynInterface_getHeaderEntry(intf: *mut dyn_interface_type,
                                           name: *const ::std::os::raw::c_char,
                                           value:
                                               *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynInterface_getAnnotationEntry(intf: *mut dyn_interface_type,
                                               name:
                                                   *const ::std::os::raw::c_char,
                                               value:
                                                   *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynInterface_methods(intf: *mut dyn_interface_type,
                                    list: *mut *mut Struct_methods_head)
         -> ::std::os::raw::c_int;
        pub fn dynInterface_nrOfMethods(intf: *mut dyn_interface_type)
         -> ::std::os::raw::c_int;
        pub fn dynMessage_logSetup(logf: logf_ft,
                                   handle: *mut ::std::os::raw::c_void,
                                   currentLogLevel: ::std::os::raw::c_int);
        pub fn dynMessage_parse(descriptor: *mut FILE,
                                out: *mut *mut dyn_message_type)
         -> ::std::os::raw::c_int;
        pub fn dynMessage_destroy(msg: *mut dyn_message_type);
        pub fn dynMessage_getName(msg: *mut dyn_message_type,
                                  name: *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynMessage_getVersion(msg: *mut dyn_message_type,
                                     version: *mut version_pt)
         -> ::std::os::raw::c_int;
        pub fn dynMessage_getVersionString(msg: *mut dyn_message_type,
                                           version:
                                               *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynMessage_getHeaderEntry(msg: *mut dyn_message_type,
                                         name: *const ::std::os::raw::c_char,
                                         value: *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynMessage_getAnnotationEntry(msg: *mut dyn_message_type,
                                             name: *const ::std::os::raw::c_char,
                                             value:
                                                 *mut *mut ::std::os::raw::c_char)
         -> ::std::os::raw::c_int;
        pub fn dynMessage_getMessageType(msg: *mut dyn_message_type,
                                         _type: *mut *mut dyn_type)
         -> ::std::os::raw::c_int;
    }
}
pub use gen::*;
